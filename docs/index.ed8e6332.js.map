{"mappings":"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","sources":["src/script/modules/global_var.js","src/script/modules/geometry_functions.js","src/script/modules/draw.js","src/script/modules/parameters.js","src/script/modules/utils.js","src/script/modules/generate_ui.js","src/script/index.js"],"sourcesContent":["const canvas = document.querySelector('canvas');\r\nconst ctx = canvas.getContext('2d');\r\n\r\nconst _ = {\r\n    canvas : canvas,\r\n    ctx: ctx,\r\n    paramsWindow: document.getElementById('params')\r\n}\r\n\r\nexport { _ };","import { _ } from \"./global_var\";\r\n\r\nconst dist = function (p1, p2) {\r\n    return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2))\r\n}\r\n\r\nconst offsetPointOnAxis = function (pRef1, pRef2, pTarget, offset = 0, useYasInput = false) {\r\n    \r\n    let na = pRef1.x > pRef2.x ? pRef1.x - pRef2.x : pRef2.x - pRef1.x;\r\n    na = na === 0 ? 1 : na;\r\n    let c = pRef1.x > pRef2.x ? pRef1.y - pRef2.y : pRef2.y - pRef1.y;\r\n    let a = c / na;\r\n    let b = pRef1.y - a * pRef1.x;\r\n\r\n    let x, y;\r\n\r\n\r\n    if (!useYasInput) {\r\n\r\n        x = pTarget.x + offset;\r\n        y = a * x + b\r\n\r\n    } else {\r\n\r\n        y = pTarget.y + offset;\r\n        x = (y - b) / a\r\n    }\r\n\r\n    return { x: x, y: y };\r\n\r\n}\r\n\r\nconst getControlPoints = function (pBefore, pCurrent, pAfter, distFromCurrentFactor = params.smoothness.initial) {\r\n\r\n    let beforeToCurrentMid = { x: (pBefore.x + pCurrent.x) / 2, y: (pBefore.y + pCurrent.y) / 2 };\r\n\r\n    let currentToAfterMid = { x: (pCurrent.x + pAfter.x) / 2, y: (pCurrent.y + pAfter.y) / 2 };\r\n\r\n    let newCurrent = { x: (beforeToCurrentMid.x + currentToAfterMid.x) / 2, y: (beforeToCurrentMid.y + currentToAfterMid.y) / 2 };\r\n    \r\n    let beforeToCurrentDist = dist(beforeToCurrentMid, newCurrent);\r\n    let currentToAfterDist = dist(newCurrent, currentToAfterMid);\r\n\r\n    let DXgreaterThanDYBefore = Math.max(beforeToCurrentMid.x, newCurrent.x) - Math.min(beforeToCurrentMid.x, newCurrent.x) >= Math.max(beforeToCurrentMid.y, newCurrent.y) - Math.min(beforeToCurrentMid.y, newCurrent.y);\r\n\r\n    let DXgreaterThanDYAfter = Math.max(currentToAfterMid.x, newCurrent.x) - Math.min(currentToAfterMid.x, newCurrent.x) >= Math.max(currentToAfterMid.y, newCurrent.y) - Math.min(currentToAfterMid.y, newCurrent.y);\r\n\r\n    let dirBefore, dirAfter;\r\n\r\n    if (DXgreaterThanDYBefore) {\r\n        dirBefore = beforeToCurrentMid.x < newCurrent.x ? 1 : -1;\r\n    } else {\r\n        dirBefore = beforeToCurrentMid.y < newCurrent.y ? 1 : -1;\r\n    }\r\n\r\n    if (DXgreaterThanDYAfter) {\r\n        dirAfter = currentToAfterMid.x > newCurrent.x ? 1 : -1;\r\n    } else {\r\n        dirAfter = currentToAfterMid.y > newCurrent.y ? 1 : -1;\r\n    }\r\n\r\n    let cpl = offsetPointOnAxis(beforeToCurrentMid, currentToAfterMid, newCurrent, -dirBefore * beforeToCurrentDist * 0.552 * distFromCurrentFactor, !DXgreaterThanDYBefore);\r\n\r\n    let cpr = offsetPointOnAxis(beforeToCurrentMid, currentToAfterMid, newCurrent, dirAfter * currentToAfterDist * 0.552 * distFromCurrentFactor, !DXgreaterThanDYAfter);\r\n\r\n    return { cpl, cpr, x: newCurrent.x , y: newCurrent.y};\r\n\r\n}\r\n\r\nconst getPoints = function (radius, pointsNumber, randomPointsInterval, randomPointsHeight, circlesRotationVariation, params) {\r\n\r\n    if (params.adaptativePointsPerCircle.value && pointsNumber !== randomPointsInterval.length) {\r\n        pointsNumber = randomPointsInterval.length;\r\n        //console.log(\"!\")\r\n    }\r\n    \r\n    let step = 360 / pointsNumber;\r\n\r\n    let originFromCenter = (params.biggestCircleScale.value / 2 - radius) * params.distanceFromCenter.value;\r\n    let originX = _.canvas.width / 2 + (originFromCenter * Math.cos(params.originRotate.value * Math.PI / 180));\r\n    let originY = _.canvas.height / 2 + (originFromCenter * Math.sin(params.originRotate.value * Math.PI / 180));\r\n\r\n    let points = [], pointsWithCp = [];\r\n\r\n    for (let i = 0; i < pointsNumber; i++){\r\n\r\n        let rotateOffset = (params.randomizePointsInterval.value ? step / 2 * (randomPointsInterval ? randomPointsInterval[i] : 0) * params.pointsIntervalRandomizationFactor.value : 0) + (params.circlesRotationVariationType.value ? 360 * (circlesRotationVariation ? circlesRotationVariation : 0) * params.circlesRotationVariationFactor.value : 0);\r\n        \r\n        let distOffset = params.randomizePointsHeight.value ? (randomPointsHeight ? randomPointsHeight[i] : 0) * radius * params.pointsIHeightRandomizationFactor.value : 0;\r\n\r\n        let x = originX + (radius + distOffset) * Math.cos((i * step + rotateOffset) * Math.PI / 180);\r\n        let y = originY + (radius + distOffset) * Math.sin((i * step + rotateOffset) * Math.PI / 180);\r\n\r\n        points.push({ x: x, y: y, angle: i * step });\r\n        \r\n    }\r\n\r\n    points.forEach((point, i) => {\r\n        \r\n        let pointBefore = i > 0 ? points[i - 1] : points[points.length - 1];\r\n\r\n        let pointAfter = i < points.length - 1 ? points[i + 1] : points[0];\r\n\r\n        pointsWithCp.push(getControlPoints(pointBefore, point, pointAfter, params.smoothness.value));\r\n    });\r\n\r\n    return pointsWithCp;\r\n}\r\n\r\nconst getCirclesRadius = function (params) {\r\n\r\n    let number = params.iterations.value;\r\n\r\n    let step = 1 / Math.max(number - 1, 1);\r\n\r\n    let radius = [];\r\n\r\n    for (let i = 0; i < number; i++){\r\n\r\n        let ease;\r\n\r\n        if (params.tension.value < 0) {\r\n            ease = 1 - Math.pow(1 - (i * step), params.tension.value * -1)\r\n        } else {\r\n            ease = Math.pow(i * step, params.tension.value);\r\n        }\r\n\r\n        radius.push(Math.round((params.smallestCircleScale.value + (ease * (params.biggestCircleScale.value - params.smallestCircleScale.value))) * 1000) / 2000);\r\n    }\r\n\r\n    return radius;\r\n}\r\n\r\nconst getPointsNumber = function (params, circleRadius) {\r\n\r\n    let arr = [];\r\n    const biggestCircleScale = params.biggestCircleScale.value / 2;\r\n    const maxPointsPerCircle = params.pointsPerCircle.value;\r\n\r\n    for (let i = 0; i < circleRadius.length; i++){\r\n\r\n        let value;\r\n\r\n        if (params.adaptativePointsPerCircle.value) {\r\n           \r\n            value = Math.floor(params.pointsPerCircle.min + (circleRadius[i] / biggestCircleScale) * (maxPointsPerCircle - params.pointsPerCircle.min));\r\n\r\n        } else {\r\n            value = maxPointsPerCircle;\r\n        }\r\n\r\n        arr.push(value);\r\n    }\r\n\r\n    return arr;\r\n}\r\n\r\nexport { dist, offsetPointOnAxis, getControlPoints, getPoints, getCirclesRadius, getPointsNumber };","import { _ } from \"./global_var\";\r\nimport { getCirclesRadius, getPointsNumber, getPoints } from \"./geometry_functions\";\r\n\r\nconst draw = function (params, generateNewSeed = { pointsInterval: false, pointsHeight: false, circlesRotation: false }) {\r\n\r\n    _.ctx.clearRect(0, 0, params.resolution.value, params.resolution.value);\r\n\r\n    _.ctx.lineWidth = params.strokeWidth.value;\r\n\r\n    if (!params.alphaBackground.value) {\r\n        _.ctx.fillStyle = \"white\";\r\n        _.ctx.fillRect(0, 0, _.canvas.width, _.canvas.height);\r\n    }\r\n\r\n    const circlesRadius = getCirclesRadius(params);\r\n\r\n    const pointsPerCircle = getPointsNumber(params, circlesRadius);\r\n\r\n    let newRandomPointsInterval = generateNewSeed.pointsInterval || (params.randomizePointsInterval.value && !params.pointsIntervalRandomizationSeed.value);\r\n\r\n    if (newRandomPointsInterval) {\r\n        \r\n        let arr = [];\r\n\r\n        for (let i = 0; i < params.iterations.value; i++) {\r\n            arr.push(Array.apply(null, Array(pointsPerCircle[i])).map(() => -1 + 2 * Math.random()))\r\n        }\r\n\r\n        params.pointsIntervalRandomizationSeed.value = arr;\r\n    }\r\n\r\n    let newRandomPointsHeight = generateNewSeed.pointsHeight || (params.randomizePointsHeight.value && !params.pointsHeightRandomizationSeed.value);\r\n\r\n    if (newRandomPointsHeight) {\r\n        \r\n        let arr = [];\r\n\r\n        for (let i = 0; i < params.iterations.value; i++) {\r\n            arr.push(Array.apply(null, Array(pointsPerCircle[i])).map(() => -1 + 2 * Math.random()))\r\n        }\r\n\r\n        params.pointsHeightRandomizationSeed.value = arr;\r\n    }\r\n\r\n    let newCirclesRotation = generateNewSeed.circlesRotation || (params.circlesRotationVariationType.value && !params.circlesRotationVariationSeed.value);\r\n\r\n    if (newCirclesRotation) {\r\n\r\n        let arr = [];\r\n\r\n        if (params.circlesRotationVariationType.value === \"randomization\") {\r\n            \r\n            for (let i = 0; i < params.iterations.value; i++) {\r\n                arr.push(Math.random());\r\n            }\r\n\r\n        } else if (params.circlesRotationVariationType.value === \"progression\") {\r\n\r\n            for (let i = 0; i < params.iterations.value; i++) {\r\n                arr.push(Math.round(i / (params.iterations.value - 1) * 1000) / 1000);\r\n            }\r\n\r\n        }\r\n\r\n        params.circlesRotationVariationSeed.value = arr;\r\n\r\n    }\r\n\r\n    circlesRadius.forEach((circleRadius, i) => {\r\n\r\n        let points = getPoints(circleRadius, pointsPerCircle[i], params.pointsIntervalRandomizationSeed.value[i], params.pointsHeightRandomizationSeed.value[i], params.circlesRotationVariationSeed.value[i], params);\r\n\r\n        _.ctx.beginPath();\r\n        \r\n        points.forEach((point, i) => {\r\n\r\n            if (i === 0) _.ctx.moveTo(point.x, point.y);\r\n\r\n            if (params.smoothness.value === 0) {\r\n                \r\n                _.ctx.lineTo(point.x, point.y);\r\n                \r\n            } else if (i > 0) {\r\n\r\n                let cpStart = points[i - 1].cpr;\r\n                let cpEnd = point.cpl;\r\n\r\n                _.ctx.bezierCurveTo(cpStart.x, cpStart.y, cpEnd.x, cpEnd.y, point.x, point.y);\r\n            }\r\n        });\r\n\r\n        if (params.smoothness.value > 0) {\r\n            _.ctx.bezierCurveTo(points[points.length - 1].cpr.x, points[points.length - 1].cpr.y, points[0].cpl.x, points[0].cpl.y, points[0].x, points[0].y);\r\n        } else {\r\n            _.ctx.closePath();\r\n        }\r\n        _.ctx.stroke();\r\n\r\n        points.forEach((point, i) => {\r\n\r\n            if (point.color === \"red\") {\r\n                _.ctx.beginPath();\r\n                _.ctx.fillStyle = point.color;\r\n                _.ctx.arc(point.x, point.y, 2, 0, 180);\r\n                _.ctx.fill();\r\n\r\n                _.ctx.beginPath();\r\n                _.ctx.fillStyle = \"blue\"\r\n                _.ctx.arc(point.cpl.x, point.cpl.y, 2, 0, 180);\r\n                _.ctx.fill();\r\n\r\n                _.ctx.beginPath();\r\n                _.ctx.fillStyle = \"blue\"\r\n                _.ctx.arc(point.cpr.x, point.cpr.y, 2, 0, 180);\r\n                _.ctx.fill();\r\n                \r\n                _.ctx.beginPath();\r\n                _.ctx.moveTo(point.cpl.x, point.cpl.y);\r\n                _.ctx.lineTo(point.cpr.x, point.cpr.y);\r\n                _.ctx.stroke()\r\n            }\r\n            \r\n        })\r\n    })\r\n    \r\n};\r\n\r\nexport { draw };","import { _ } from \"./global_var\";\r\nimport { draw } from \"./draw\";\r\n\r\nlet params;\r\n\r\nconst forceRecompute = function (paramName) {\r\n\r\n    let param = params[paramName];\r\n\r\n    if (param.inputValue) param.value = param.inputValue;\r\n\r\n}\r\n\r\nparams = {\r\n    resolution: {\r\n        group: \"downloadImage\",\r\n        label: \"resolution\",\r\n        type: \"number\",\r\n        initial: window.innerHeight,\r\n        min: 1,\r\n        max: 6000,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            let value = Math.max(Math.min(v, this.max), this.min);\r\n            this.computedValue = this.inputValue = _.canvas.width = _.canvas.height = value;\r\n\r\n            forceRecompute(\"biggestCircleScale\");\r\n            forceRecompute(\"strokeWidth\");\r\n        }\r\n    },\r\n    biggestCircleScale: {\r\n        type: \"range\",\r\n        initial: 0.85,\r\n        min: 0,\r\n        max: 4,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            let value = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n            this.computedValue = value * params.resolution.value;\r\n\r\n            forceRecompute(\"smallestCircleScale\");\r\n        }\r\n    },\r\n    smallestCircleScale: {\r\n        type: \"range\",\r\n        initial: 0.4,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            let value = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n            this.computedValue = value * params.biggestCircleScale.value;\r\n        }\r\n    },\r\n    originRotate: {\r\n        group: \"origin\",\r\n        type: \"range\",\r\n        label: \"rotate\",\r\n        initial: 60,\r\n        min: 0,\r\n        max: 360,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    distanceFromCenter: {\r\n        group: \"origin\",\r\n        type: \"range\",\r\n        label: \"distanceFromCenter\",\r\n        initial: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    iterations: {\r\n        type: \"number\",\r\n        initial: 20,\r\n        min: 1,\r\n        step: 1,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(v, this.min);\r\n        }\r\n    },\r\n    tension: {\r\n        type: \"range\",\r\n        initial: 0.5,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let maxTension = 5;\r\n\r\n            let value = Math.max(Math.min(v, this.max), this.min);\r\n            this.inputValue = value;\r\n\r\n            if (value < 0.5) {\r\n                value = (1 + ((0.5 - value) / 0.5) * (maxTension - 1)) * -1;\r\n            } else {\r\n                value = 1 + ((value-0.5) / 0.5) * (maxTension - 1)\r\n            }\r\n\r\n            this.computedValue = value;\r\n        }\r\n    },\r\n    pointsPerCircle: {\r\n        group: \"pointsPerCircle\",\r\n        type: \"number\",\r\n        initial: 20,\r\n        min: 4,\r\n        step: 1,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(v, this.min);\r\n        }\r\n    },\r\n    adaptativePointsPerCircle: {\r\n        group: \"pointsPerCircle\",\r\n        label: \"adaptative\",\r\n        type: \"select\",\r\n        listOfValues: [\r\n            {value: true, text: \"true\"},\r\n            {value: false, text: \"false\", selected: true},\r\n        ],\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let value;\r\n\r\n            try {\r\n                value = JSON.parse(v);\r\n            } catch {\r\n                value = v;\r\n            }\r\n\r\n            this.computedValue = this.inputValue = value;\r\n        }\r\n    },\r\n    smoothness: {\r\n        type: \"range\",\r\n        initial: 0,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    randomizePointsInterval: {\r\n        group: \"randomizePointsInterval\",\r\n        type: \"select\",\r\n        listOfValues: [\r\n            {value: true, text: \"true\"},\r\n            {value: false, text: \"false\", selected: true},\r\n        ],\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let value;\r\n\r\n            try {\r\n                value = JSON.parse(v);\r\n            } catch {\r\n                value = v;\r\n            }\r\n\r\n            this.computedValue = this.inputValue = value;\r\n        }\r\n    },\r\n    pointsIntervalRandomizationFactor: {\r\n        group: \"randomizePointsInterval\",\r\n        type: \"range\",\r\n        label: \"randomizationFactor\",\r\n        initial: 0,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    pointsIntervalRandomizationSeed: {\r\n        group: \"randomizePointsInterval\",\r\n        type: \"button\",\r\n        text: \"seed\",\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = v;\r\n        },\r\n        onClick: function () {\r\n     \r\n            requestAnimationFrame(() => {\r\n                draw(params, {pointsInterval: true});\r\n            });\r\n        }\r\n    },\r\n    randomizePointsHeight: {\r\n        group: \"randomizePointsHeight\",\r\n        type: \"select\",\r\n        listOfValues: [\r\n            {value: true, text: \"true\"},\r\n            {value: false, text: \"false\", selected: true},\r\n        ],\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let value;\r\n\r\n            try {\r\n                value = JSON.parse(v);\r\n            } catch {\r\n                value = v;\r\n            }\r\n\r\n            this.computedValue = this.inputValue = value;\r\n        }\r\n    },\r\n    pointsIHeightRandomizationFactor: {\r\n        group: \"randomizePointsHeight\",\r\n        type: \"range\",\r\n        label: \"randomizationFactor\",\r\n        initial: 0,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    pointsHeightRandomizationSeed: {\r\n        group: \"randomizePointsHeight\",\r\n        type: \"button\",\r\n        text: \"seed\",\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = v;\r\n        },\r\n        onClick: function () {\r\n     \r\n            requestAnimationFrame(() => {\r\n                draw(params, {pointsHeight: true});\r\n            });\r\n        }\r\n    },\r\n    circlesRotationVariationType: {\r\n        group: \"circlesRotationVariation\",\r\n        label: \"type\",\r\n        type: \"select\",\r\n        listOfValues: [\r\n            {value: false, text: \"none\", selected: true},\r\n            {value: \"randomization\", text: \"randomization\"},\r\n            {value: \"progression\", text: \"progression\"},\r\n        ],\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let value;\r\n\r\n            try {\r\n                value = JSON.parse(v);\r\n            } catch {\r\n                value = v;\r\n            }\r\n\r\n            this.computedValue = this.inputValue = value;\r\n\r\n            if (value) {\r\n                requestAnimationFrame(() => {\r\n                    draw(params, {circlesRotation: true});\r\n                });\r\n            }\r\n        }\r\n    },\r\n    circlesRotationVariationFactor: {\r\n        group: \"circlesRotationVariation\",\r\n        type: \"range\",\r\n        label: \"variationFactor\",\r\n        initial: 0,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    circlesRotationVariationSeed: {\r\n        group: \"circlesRotationVariation\",\r\n        type: \"button\",\r\n        text: \"seed\",\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = v;\r\n        },\r\n        onClick: function () {\r\n     \r\n            requestAnimationFrame(() => {\r\n                draw(params, {circlesRotation: true});\r\n            });\r\n        }\r\n    },\r\n    strokeWidth: {\r\n        type: \"number\",\r\n        initial: 2,\r\n        max: 100,\r\n        min: 0,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            let value = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n            this.computedValue = (params.resolution.value * value) / 2048;\r\n        }\r\n    },\r\n    alphaBackground: {\r\n        type: \"select\",\r\n        listOfValues: [\r\n            {value: true, text: \"true\"},\r\n            {value: false, text: \"false\", selected: true},\r\n        ],\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let value;\r\n\r\n            try {\r\n                value = JSON.parse(v);\r\n            } catch {\r\n                value = v;\r\n            }\r\n\r\n            this.computedValue = this.inputValue = value;\r\n        }\r\n    },\r\n    downloadImage: {\r\n        group: \"downloadImage\",\r\n        type: \"button\",\r\n        text: \"download\",\r\n        onClick: function () {\r\n            _.canvas.toBlob(blob => {\r\n\r\n                let a = document.createElement('a');\r\n                a.href = URL.createObjectURL(blob);\r\n                a.setAttribute('download', '');\r\n                a.click();\r\n                URL.revokeObjectURL(a.href);\r\n\r\n            }, \"image/png\")\r\n        }\r\n    }\r\n};\r\n\r\nexport { params };","const camelCaseToSpan = function (str) {\r\n    \r\n    let uppers = [0], span = \"\";\r\n\r\n    Array.from(str).forEach((char, i) => {\r\n        if (char.toUpperCase() === char) uppers.push(i);\r\n    });\r\n\r\n    uppers.forEach((upIndex, i) => {\r\n        span += \"<span>\" + str.slice(upIndex, uppers[i + 1]) + \"</span>\";\r\n    })\r\n\r\n    return span;\r\n\r\n};\r\n\r\nexport { camelCaseToSpan };","import { _ } from \"./global_var\";\r\nimport { camelCaseToSpan } from \"./utils\";\r\nimport { params } from \"./parameters\";\r\nimport { draw } from \"./draw\";\r\n\r\nconst inputHandler = function (e) {\r\n\r\n    let param = e.target.getAttribute(\"data-var\");\r\n    let newValue = e.target.value;\r\n\r\n    params[param].value = newValue;\r\n\r\n    requestAnimationFrame(() => {\r\n\r\n        let seedParam;\r\n\r\n        if (param === \"pointsPerCircle\"\r\n            || param === \"adaptativePointsPerCircle\"\r\n            || ((param === \"tension\" || param === \"smallestCircleScale\") && params.adaptativePointsPerCircle.value))\r\n        {\r\n            seedParam = { pointsInterval: true, pointsHeight: true };\r\n        } else if (param === \"iterations\") {\r\n            seedParam = { pointsInterval: true, pointsHeight: true, circlesRotation: true };\r\n        }\r\n\r\n        draw(params, seedParam);\r\n    });\r\n};\r\n\r\nconst generateUI = function (params) {\r\n    for (let param in params) {\r\n\r\n        let current = params[param];\r\n    \r\n        if (current.hasOwnProperty('initial')) current.value = current.initial;\r\n    \r\n        let fieldset, elt;\r\n    \r\n        if (current.hasOwnProperty('group')) {\r\n            \r\n            let group = document.querySelector(\".\" + current.group);\r\n    \r\n            if (group) fieldset = group;\r\n            else {\r\n    \r\n                fieldset = document.createElement('fieldset');\r\n                fieldset.classList.add(current.group);\r\n                let legend = document.createElement('legend');\r\n                legend.innerHTML = camelCaseToSpan(current.group);\r\n                fieldset.append(legend);\r\n    \r\n            }\r\n        } else {\r\n            fieldset = document.createElement('fieldset');\r\n            let legend = document.createElement('legend');\r\n            legend.innerHTML = camelCaseToSpan(param);\r\n            fieldset.append(legend);\r\n        }\r\n    \r\n        if (current.type === \"button\") {\r\n    \r\n            elt = document.createElement('button');\r\n            elt.innerHTML = current.text;\r\n            elt.addEventListener('click', current.onClick);\r\n            \r\n        } else if (current.type === \"select\") {\r\n    \r\n            elt = document.createElement(\"select\");\r\n    \r\n            current.listOfValues.forEach(value => {\r\n                elt.innerHTML += `<option ${value.hasOwnProperty(\"selected\") && value.selected ? \"selected\" : \"\"} value=\"${value.value}\">${value.text}</option>`\r\n            });\r\n    \r\n            elt.addEventListener('input', inputHandler);\r\n            elt.setAttribute('data-var', param);\r\n    \r\n        } else {\r\n    \r\n            elt = document.createElement(\"input\");\r\n    \r\n            elt.type = current.type;\r\n\r\n            if (current.hasOwnProperty('step')) elt.step = current.step;\r\n    \r\n            if (current.hasOwnProperty('min')) elt.min = current.min;\r\n            if (current.hasOwnProperty('max')) elt.max = current.max;\r\n    \r\n            elt.value = current.inputValue;\r\n    \r\n            elt.addEventListener('input', inputHandler);\r\n            elt.setAttribute('data-var', param);\r\n        }\r\n    \r\n        if (current.hasOwnProperty(\"label\")) {\r\n            let fieldsetLabel = document.createElement(\"fieldset\");\r\n            let label = document.createElement('legend');\r\n            label.innerHTML = camelCaseToSpan(current.label);\r\n            fieldsetLabel.append(label);\r\n            fieldsetLabel.append(elt);\r\n            elt = fieldsetLabel;\r\n        }\r\n    \r\n        fieldset.append(elt);\r\n    \r\n        _.paramsWindow.append(fieldset);\r\n    }\r\n};\r\n\r\nexport { generateUI };","import { params } from \"./modules/parameters\";\r\nimport { generateUI } from \"./modules/generate_ui\";\r\nimport { draw } from \"./modules/draw\";\r\n\r\ngenerateUI(params);\r\n\r\nrequestAnimationFrame(() => {\r\n    draw(params);\r\n});\r\n\r\n"],"names":["$ba34ad0cc1ecfea6$var$canvas","document","querySelector","$ba34ad0cc1ecfea6$var$ctx","getContext","$ba34ad0cc1ecfea6$export$71511d61b312f219","canvas","ctx","paramsWindow","getElementById","$58c2b6c9d3a00a13$export$6c4a311cc157c764","p1","p2","Math","sqrt","pow","x","y","$58c2b6c9d3a00a13$export$36b2348463b95166","pRef1","pRef2","pTarget","offset","useYasInput","na","a","b","$58c2b6c9d3a00a13$export$7e3e5a9ff6d02ede","pBefore","pCurrent","pAfter","distFromCurrentFactor","params","smoothness","initial","dirBefore","dirAfter","beforeToCurrentMid","currentToAfterMid","newCurrent","beforeToCurrentDist","currentToAfterDist","DXgreaterThanDYBefore","max","min","DXgreaterThanDYAfter","$ea6065299f17f9f2$export$e529deb2bfd496dc","generateNewSeed","pointsInterval","pointsHeight","circlesRotation","clearRect","resolution","value","lineWidth","strokeWidth","alphaBackground","fillStyle","fillRect","width","height","circlesRadius","number","iterations","step","radius","i","ease","tension","push","round","smallestCircleScale","biggestCircleScale","$58c2b6c9d3a00a13$export$a0802d0d56310d0a","pointsPerCircle","circleRadius","arr","maxPointsPerCircle","length","adaptativePointsPerCircle","floor","$58c2b6c9d3a00a13$export$a990042fb368a533","randomizePointsInterval","pointsIntervalRandomizationSeed","Array","apply","map","random","randomizePointsHeight","pointsHeightRandomizationSeed","circlesRotationVariationType","circlesRotationVariationSeed","i1","forEach","i2","points","pointsNumber","randomPointsInterval","randomPointsHeight","circlesRotationVariation","originFromCenter","distanceFromCenter","originX","cos","originRotate","PI","originY","sin","pointsWithCp","rotateOffset","pointsIntervalRandomizationFactor","circlesRotationVariationFactor","distOffset","pointsIHeightRandomizationFactor","angle","point","pointBefore","pointAfter","$58c2b6c9d3a00a13$export$af0496c55bf31eb","beginPath","moveTo","lineTo","cpStart","cpr","cpEnd","cpl","bezierCurveTo","closePath","stroke","color","arc","fill","$edfdaed3b9f3fa0f$export$281ad3752a540efe","$edfdaed3b9f3fa0f$var$forceRecompute","paramName","param","inputValue","group","label","type","window","innerHeight","this","computedValue","v","listOfValues","text","selected","JSON","parse","onClick","requestAnimationFrame","downloadImage","toBlob","blob","createElement","href","URL","createObjectURL","setAttribute","click","revokeObjectURL","$c96f57613fceb58f$export$465e181847366fda","str","uppers","span","from","char","toUpperCase","upIndex","slice","$36768e1cc8fcd734$var$inputHandler","e","target","getAttribute","newValue","seedParam","fieldset","elt","current","hasOwnProperty","classList","add","legend","innerHTML","append","addEventListener","fieldsetLabel","$36768e1cc8fcd734$export$cddef0e4b5e6ec4c"],"version":3,"file":"index.ed8e6332.js.map"}