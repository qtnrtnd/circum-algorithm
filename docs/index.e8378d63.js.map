{"mappings":"AAAA,MAAMA,EAASC,SAASC,cAAc,UAChCC,EAAMH,EAAOI,WAAW,MAExBC,EAAI,CACNC,OAASN,EACTO,IAAKJ,EACLK,aAAcP,SAASQ,eAAe,WCJpCC,EAAO,SAAUC,EAAIC,GACvB,OAAOC,KAAKC,KAAKD,KAAKE,IAAIH,EAAGI,EAAIL,EAAGK,EAAG,GAAKH,KAAKE,IAAIH,EAAGK,EAAIN,EAAGM,EAAG,KAGhEC,EAAmB,SAAUC,EAAGC,EAAOC,EAAMC,EAAKC,GAEpD,IAAIC,EAQJ,OALIA,EADAJ,EAAQ,EACD,EAAIP,KAAKE,IAAI,EAAKI,EAAIE,GAAe,EAARD,GAE7BP,KAAKE,IAAII,EAAIE,EAAMD,GAGvBP,KAAKY,MAAqC,KAA9BH,EAAOE,GAAQD,EAAMD,KAAiB,KAGvDI,EAAoB,SAAUC,EAAOC,EAAOC,EAASC,EAAS,EAAGC,GAAc,GAEjF,IAKIf,EAAGC,EALHe,EAAKnB,KAAKU,IAAII,EAAMX,EAAIY,EAAMZ,EAAIW,EAAMX,EAAIY,EAAMZ,EAAIY,EAAMZ,EAAIW,EAAMX,EAAG,GAEzEiB,GADIN,EAAMX,EAAIY,EAAMZ,EAAIW,EAAMV,EAAIW,EAAMX,EAAIW,EAAMX,EAAIU,EAAMV,GACpDe,EACRE,EAAIP,EAAMV,EAAIgB,EAAIN,EAAMX,EAgB5B,OAXKe,GAODd,EAAIY,EAAQZ,EAAIa,EAChBd,GAAKC,EAAIiB,GAAKD,IANdjB,EAAIa,EAAQb,EAAIc,EAChBb,EAAIgB,EAAIjB,EAAIkB,GAQT,CAAElB,EAAGA,EAAGC,EAAGA,IAIhBkB,EAAmB,SAAUC,EAASC,EAAUC,EAAQC,EAAwBC,OAAOC,WAAWC,SAEpG,IAaIC,EAAWC,EAbXC,EAAqB,CAAE7B,GAAIoB,EAAQpB,EAAIqB,EAASrB,GAAK,EAAGC,GAAImB,EAAQnB,EAAIoB,EAASpB,GAAK,GAEtF6B,EAAoB,CAAE9B,GAAIqB,EAASrB,EAAIsB,EAAOtB,GAAK,EAAGC,GAAIoB,EAASpB,EAAIqB,EAAOrB,GAAK,GAEnF8B,EAAa,CAAE/B,GAAI6B,EAAmB7B,EAAI8B,EAAkB9B,GAAK,EAAGC,GAAI4B,EAAmB5B,EAAI6B,EAAkB7B,GAAK,GAEtH+B,EAAsBtC,EAAKmC,EAAoBE,GAC/CE,EAAqBvC,EAAKqC,EAAYD,GAEtCI,EAAwBrC,KAAKU,IAAIsB,EAAmB7B,EAAG+B,EAAW/B,GAAKH,KAAKS,IAAIuB,EAAmB7B,EAAG+B,EAAW/B,IAAMH,KAAKU,IAAIsB,EAAmB5B,EAAG8B,EAAW9B,GAAKJ,KAAKS,IAAIuB,EAAmB5B,EAAG8B,EAAW9B,GAEhNkC,EAAuBtC,KAAKU,IAAIuB,EAAkB9B,EAAG+B,EAAW/B,GAAKH,KAAKS,IAAIwB,EAAkB9B,EAAG+B,EAAW/B,IAAMH,KAAKU,IAAIuB,EAAkB7B,EAAG8B,EAAW9B,GAAKJ,KAAKS,IAAIwB,EAAkB7B,EAAG8B,EAAW9B,GAoB/M,OAfI0B,EADAO,EACYL,EAAmB7B,EAAI+B,EAAW/B,EAAI,GAAI,EAE1C6B,EAAmB5B,EAAI8B,EAAW9B,EAAI,GAAI,EAItD2B,EADAO,EACWL,EAAkB9B,EAAI+B,EAAW/B,EAAI,GAAI,EAEzC8B,EAAkB7B,EAAI8B,EAAW9B,EAAI,GAAI,EAOjD,KAJGS,EAAkBmB,EAAoBC,EAAmBC,GAAaJ,EAAYK,EAAsB,KAAQT,GAAwBW,OAExIxB,EAAkBmB,EAAoBC,EAAmBC,EAAYH,EAAWK,EAAqB,KAAQV,GAAwBY,GAE5HnC,EAAG+B,EAAW/B,EAAIC,EAAG8B,EAAW9B,IC1EjDmC,EAAO,SAAUZ,EAAQa,EAAkB,CAAEC,gBAAgB,EAAOC,cAAc,EAAOC,iBAAiB,IAE5GnD,EAAEE,IAAIkD,UAAU,EAAG,EAAGjB,EAAOkB,WAAWC,MAAOnB,EAAOkB,WAAWC,OAE5DnB,EAAOoB,gBAAgBD,QACxBtD,EAAEE,IAAIsD,UAAY,QAClBxD,EAAEE,IAAIuD,SAAS,EAAG,EAAGzD,EAAEC,OAAOyD,MAAO1D,EAAEC,OAAO0D,SAGlD,MAAMC,ED6He,SAAUzB,GAE/B,IAAI0B,EAAS1B,EAAO2B,WAAWR,MAE3BtC,EAAO,EAAIR,KAAKU,IAAI2C,EAAS,EAAG,GAEhCE,EAAS,GAEb,IAAK,IAAIjD,EAAI,EAAGA,EAAI+C,EAAQ/C,IAExBiD,EAAOC,KAAKnD,EAAiBC,EAAGqB,EAAO8B,kBAAkBX,MAAOtC,EAAMmB,EAAO+B,oBAAoBZ,MAAQ,EAAGnB,EAAOgC,mBAAmBb,MAAQ,IAGlJ,OAAOS,EC1IeK,CAAiBjC,GAEjCkC,ED2Ic,SAAUlC,EAAQmC,GAEtC,IAAIC,EAAM,GACV,MAAMJ,EAAqBhC,EAAOgC,mBAAmBb,MAAQ,EACvDkB,EAAqBrC,EAAOkC,gBAAgBf,MAElD,IAAK,IAAIxC,EAAI,EAAGA,EAAIwD,EAAaG,OAAQ3D,IAAI,CAEzC,IAAIwC,EAIAA,EAFAnB,EAAOuC,0BAA0BpB,MAEzB9C,KAAKmE,MAAMxC,EAAOkC,gBAAgBpD,IAAOqD,EAAaxD,GAAKqD,GAAuBK,EAAqBrC,EAAOkC,gBAAgBpD,MAG9HuD,EAGZD,EAAIP,KAAKV,GAGb,OAAOiB,EChKiBK,CAAgBzC,EAAQyB,GAIhD,GAF8BZ,EAAgBC,gBAAmBd,EAAO0C,wBAAwBvB,QAAUnB,EAAO2C,gCAAgCxB,MAEpH,CAEzB,IAAIiB,EAAM,GAEV,IAAK,IAAIzD,EAAI,EAAGA,EAAIqB,EAAO2B,WAAWR,MAAOxC,IACzCyD,EAAIP,KAAKe,MAAMC,MAAM,KAAMD,MAAMV,EAAgBvD,KAAKmE,KAAG,IAAY,EAAIzE,KAAK0E,SAAd,KAGpE/C,EAAO2C,gCAAgCxB,MAAQiB,EAKnD,GAF4BvB,EAAgBE,cAAiBf,EAAOgD,sBAAsB7B,QAAUnB,EAAOiD,8BAA8B9B,MAE9G,CAEvB,IAAIiB,EAAM,GAEV,IAAK,IAAIzD,EAAI,EAAGA,EAAIqB,EAAO2B,WAAWR,MAAOxC,IACzCyD,EAAIP,KAAKe,MAAMC,MAAM,KAAMD,MAAMV,EAAgBvD,KAAKmE,KAAG,IAAY,EAAIzE,KAAK0E,SAAd,KAGpE/C,EAAOiD,8BAA8B9B,MAAQiB,EAKjD,GAF+BvB,EAAgBG,iBAAkE,kBAA9ChB,EAAOkD,6BAA6B/B,QAA8BnB,EAAOmD,iCAAiChC,MAE/I,CAE1B,IAAIiB,EAAM,GAEV,IAAK,IAAIzD,EAAI,EAAGA,EAAIqB,EAAO2B,WAAWR,MAAOxC,IACzCyD,EAAIP,KAAKxD,KAAK0E,UAGlB/C,EAAOmD,iCAAiChC,MAAQiB,EAIpDX,EAAc2B,SAAO,CAAEjB,EAAckB,KAEjC,IAAIC,EAAYtD,EAAOuD,YAAYpC,MAE/BnC,EAAOX,KAAKU,IAAIL,EAAiB2E,EAAGrD,EAAOwD,gBAAgBrC,MAAO,GAAKnB,EAAO2B,WAAWR,MAAQ,GAAInB,EAAOyD,qBAAqBtC,MAAOnB,EAAO0D,qBAAqBvC,OAAQ,MAE5KnB,EAAO2D,sBAAsBxC,QAAOmC,GAAatE,GAErDnB,EAAEE,IAAIuF,UAAYA,EAElB,IAAIM,EDeM,SAAUhC,EAAQiC,EAAcC,EAAsBC,EAAoBC,EAAuBC,EAAwBjE,GAEnIA,EAAOuC,0BAA0BpB,OAAS0C,IAAiBC,EAAqBxB,SAChFuB,EAAeC,EAAqBxB,QAGxC,IAAI4B,EAAY,IAAML,EAClBM,EAAa,EAAInE,EAAO2B,WAAWR,MAEnCiD,GAAoBpE,EAAOgC,mBAAmBb,MAAQ,EAAIS,GAAU5B,EAAOqE,mBAAmBlD,MAC9FmD,EAAUzG,EAAEC,OAAOyD,MAAQ,EAAK6C,EAAmB/F,KAAKkG,IAAIvE,EAAOwE,aAAarD,MAAQ9C,KAAKoG,GAAK,KAClGC,EAAU7G,EAAEC,OAAO0D,OAAS,EAAK4C,EAAmB/F,KAAKsG,IAAI3E,EAAOwE,aAAarD,MAAQ9C,KAAKoG,GAAK,KAEnGb,EAAS,GAAIgB,EAAe,GAAIC,EAAoD,EAAGC,EAAkD,EAEzIC,EAAoBf,GAAgD,EAEtB,gBAA9ChE,EAAOkD,6BAA6B/B,QACpC4D,EAAoB1G,KAAKY,MAAMgF,GAA0BjE,EAAO2B,WAAWR,MAAQ,GAAK,KAAO,KAG/FnB,EAAOgF,4CAA4C7D,QAEnD0D,EAAoDnG,EAAiBuF,EAAwBjE,EAAOiF,gCAAgC9D,MAAOgD,EAAYnE,EAAOkF,qCAAqC/D,MAAOnB,EAAOmF,qCAAqChE,QAGtPnB,EAAOoF,0CAA0CjE,QAEjD2D,EAAkDpG,EAAiBuF,EAAwBjE,EAAOqF,8BAA8BlE,MAAOgD,EAAYnE,EAAOsF,mCAAmCnE,MAAOnB,EAAOuF,mCAAmCpE,QAGlP,IAAK,IAAIkC,EAAI,EAAGA,EAAIQ,EAAcR,IAAI,CAElC,IAAImC,GAAgBxF,EAAO0C,wBAAwBvB,MAAQ+C,EAAY,GAAKJ,EAAuBA,EAAqBT,GAAK,GAAKrD,EAAOyF,kCAAkCtE,MAAQ0D,EAAoD,IAAM7E,EAAOkD,6BAA6B/B,MAAQ,IAAM4D,EAAoB/E,EAAO0F,+BAA+BvE,MAAQ,GAE7VwE,EAAa3F,EAAOgD,sBAAsB7B,OAAS4C,EAAqBA,EAAmBV,GAAK,GAAKzB,EAAS5B,EAAO4F,gCAAgCzE,MAAQ2D,EAAkD,EAE/MtG,EAAI8F,GAAW1C,EAAS+D,GAActH,KAAKkG,KAAKlB,EAAIa,EAAYsB,GAAgBnH,KAAKoG,GAAK,KAC1FhG,EAAIiG,GAAW9C,EAAS+D,GAActH,KAAKsG,KAAKtB,EAAIa,EAAYsB,GAAgBnH,KAAKoG,GAAK,KAE9Fb,EAAO/B,KAAK,CAAErD,EAAGA,EAAGC,EAAGA,EAAGoH,MAAOxC,EAAIa,IAazC,OATAN,EAAOR,SAAO,CAAE0C,EAAOnH,KAEnB,IAAIoH,EAAcpH,EAAI,EAAIiF,EAAOjF,EAAI,GAAKiF,EAAOA,EAAOtB,OAAS,GAE7D0D,EAAarH,EAAIiF,EAAOtB,OAAS,EAAIsB,EAAOjF,EAAI,GAAKiF,EAAO,GAEhEgB,EAAa/C,KAAKlC,EAAiBoG,EAAaD,EAAOE,EAAYhG,EAAOC,WAAWkB,WAGlFyD,ECpEUqB,CAAU9D,EAAcD,EAAgBmB,GAAIrD,EAAO2C,gCAAgCxB,MAAMkC,GAAIrD,EAAOiD,8BAA8B9B,MAAMkC,GAAIrD,EAAOmD,iCAAiChC,MAAMkC,GAAIA,EAAGrD,GAE9MnC,EAAEE,IAAImI,YAENtC,EAAOR,SAAO,CAAE0C,EAAOnH,KAInB,GAFU,IAANA,GAASd,EAAEE,IAAIoI,OAAOL,EAAMtH,EAAGsH,EAAMrH,GAET,IAA5BuB,EAAOC,WAAWkB,MAElBtD,EAAEE,IAAIqI,OAAON,EAAMtH,EAAGsH,EAAMrH,QAEzB,GAAIE,EAAI,EAAG,CAEd,IAAI0H,EAAUzC,EAAOjF,EAAI,GAAG2H,IACxBC,EAAQT,EAAMU,IAElB3I,EAAEE,IAAI0I,cAAcJ,EAAQ7H,EAAG6H,EAAQ5H,EAAG8H,EAAM/H,EAAG+H,EAAM9H,EAAGqH,EAAMtH,EAAGsH,EAAMrH,OAI/EuB,EAAOC,WAAWkB,MAAQ,EAC1BtD,EAAEE,IAAI0I,cAAc7C,EAAOA,EAAOtB,OAAS,GAAGgE,IAAI9H,EAAGoF,EAAOA,EAAOtB,OAAS,GAAGgE,IAAI7H,EAAGmF,EAAO,GAAG4C,IAAIhI,EAAGoF,EAAO,GAAG4C,IAAI/H,EAAGmF,EAAO,GAAGpF,EAAGoF,EAAO,GAAGnF,GAE/IZ,EAAEE,IAAI2I,YAIV7I,EAAEE,IAAI4I,aC3Fd,IAAIC,EACJ,MAEMC,EAAiB,SAAUC,GAE7B,IAAIC,EAAQH,EAAOE,GAEfC,EAAMC,aAAYD,EAAM5F,MAAQ4F,EAAMC,aAI9CJ,EAAS,CACL1F,WAAY,CACR+F,MAAO,gBACPC,MAAO,aACPC,KAAM,SACNjH,QAASkH,OAAOC,YAChBvI,IAAK,EACLC,IAAK,IACDoC,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GACN,IAAIrG,EAAQ9C,KAAKU,IAAIV,KAAKS,IAAI0I,EAAGF,KAAKvI,KAAMuI,KAAKxI,KACjDwI,KAAKC,cAAgBD,KAAKN,WAAanJ,EAAEC,OAAOyD,MAAQ1D,EAAEC,OAAO0D,OAASL,EAE1E0F,EAAe,sBACfA,EAAe,iBAGvB7E,mBAAoB,CAChBmF,KAAM,QACNjH,QAAS,IACTpB,IAAK,EACLC,IAAK,EACLF,KAAM,KACN4I,WAAY,CAAC,IAAM,EAAE,EAAG,GAAK,EAAE,EAAG,IAAM,GACpCtG,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GACN,IAAIrG,EAAQmG,KAAKN,WAAa3I,KAAKU,IAAIV,KAAKS,IAAI0I,EAAGF,KAAKvI,KAAMuI,KAAKxI,KACnEwI,KAAKC,cAAgBpG,EAAQyF,EAAO1F,WAAWC,MAE/C0F,EAAe,yBAGvB9E,oBAAqB,CACjBoF,KAAM,QACNjH,QAAS,GACTpB,IAAK,EACLC,IAAK,EACLF,KAAM,KACN4I,WAAY,CAAC,IAAM,EAAE,EAAG,GAAK,EAAE,EAAG,KAC9BtG,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GACN,IAAIrG,EAAQmG,KAAKN,WAAa3I,KAAKU,IAAIV,KAAKS,IAAI0I,EAAGF,KAAKvI,KAAMuI,KAAKxI,KACnEwI,KAAKC,cAAgBpG,EAAQyF,EAAO5E,mBAAmBb,QAG/DqD,aAAc,CACVyC,MAAO,SACPE,KAAM,QACND,MAAO,SACPhH,QAAS,GACTpB,IAAK,EACLC,IAAK,IACLF,KAAM,KACN4I,WAAY,CAAC,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,KACrCtG,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GACNF,KAAKC,cAAgBD,KAAKN,WAAa3I,KAAKU,IAAIV,KAAKS,IAAI0I,EAAGF,KAAKvI,KAAMuI,KAAKxI,OAGpFuF,mBAAoB,CAChB4C,MAAO,SACPE,KAAM,QACND,MAAO,qBACPhH,QAAS,EACTpB,IAAK,EACLC,IAAK,EACLF,KAAM,KACFsC,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GACNF,KAAKC,cAAgBD,KAAKN,WAAa3I,KAAKU,IAAIV,KAAKS,IAAI0I,EAAGF,KAAKvI,KAAMuI,KAAKxI,OAGpF6C,WAAY,CACRwF,KAAM,SACNjH,QAAS,GACTpB,IAAK,EACLD,KAAM,EACFsC,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GACNF,KAAKC,cAAgBD,KAAKN,WAAa3I,KAAKU,IAAIyI,EAAGF,KAAKxI,OAGhEgD,kBAAmB,CACfmF,MAAO,gBACPC,MAAO,OACPC,KAAM,QACNjH,QAAS,GACTpB,IAAK,EACLC,IAAK,EACLF,KAAM,KACN4I,WAAY,CAAC,IACTtG,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GAEN,IAAIrG,EAAQ9C,KAAKU,IAAIV,KAAKS,IAAI0I,EAAGF,KAAKvI,KAAMuI,KAAKxI,KACjDwI,KAAKN,WAAa7F,EAGdA,EADAA,EAAQ,IACqD,GAApD,GAAM,GAAMA,GAAS,GAAG,GAEzB,GAAMA,EAAM,IAAO,GAAG,EAGlCmG,KAAKC,cAAgBpG,IAG7Be,gBAAiB,CACb+E,MAAO,kBACPE,KAAM,SACNjH,QAAS,GACTpB,IAAK,EACLD,KAAM,EACFsC,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GACNF,KAAKC,cAAgBD,KAAKN,WAAa3I,KAAKU,IAAIyI,EAAGF,KAAKxI,OAGhEyD,0BAA2B,CACvB0E,MAAO,kBACPC,MAAO,aACPC,KAAM,SACNO,aAAc,CACV,CAACvG,OAAO,EAAMwG,KAAM,QACpB,CAACxG,OAAO,EAAOwG,KAAM,QAASC,UAAU,IAE5C1H,SAAS,EACLiB,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GAEN,IAAIrG,EAEJ,IACIA,EAAQ0G,KAAKC,MAAMN,GACrB,MACErG,EAAQqG,EAGZF,KAAKC,cAAgBD,KAAKN,WAAa7F,IAG/ClB,WAAY,CACRkH,KAAM,QACNjH,QAAS,EACTpB,IAAK,EACLC,IAAK,EACLF,KAAM,KACFsC,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GACNF,KAAKC,cAAgBD,KAAKN,WAAa3I,KAAKU,IAAIV,KAAKS,IAAI0I,EAAGF,KAAKvI,KAAMuI,KAAKxI,OAGpF4D,wBAAyB,CACrBuE,MAAO,0BACPE,KAAM,SACNO,aAAc,CACV,CAACvG,OAAO,EAAMwG,KAAM,QACpB,CAACxG,OAAO,EAAOwG,KAAM,QAASC,UAAU,IAE5CG,sBAAuB,CACnBC,MAAS,KAGb9H,SAAS,EACLiB,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GAEN,IAAIrG,EAEJ,IACIA,EAAQ0G,KAAKC,MAAMN,GACrB,MACErG,EAAQqG,EAGZF,KAAKC,cAAgBD,KAAKN,WAAa7F,IAG/CsE,kCAAmC,CAC/BwB,MAAO,0BACPE,KAAM,QACND,MAAO,sBACPhH,QAAS,EACTpB,IAAK,EACLC,IAAK,EACLF,KAAM,KACFsC,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GACNF,KAAKC,cAAgBD,KAAKN,WAAa3I,KAAKU,IAAIV,KAAKS,IAAI0I,EAAGF,KAAKvI,KAAMuI,KAAKxI,OAGpF6D,gCAAiC,CAC7BsE,MAAO,0BACPE,KAAM,SACNQ,KAAM,OACNzH,SAAS,EACLiB,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GACNF,KAAKC,cAAgBC,GAEzBS,QAAS,WAELC,uBAAqB,KACjBtH,EAAKgG,EAAQ,CAAC9F,gBAAgB,SAI1CkE,4CAA6C,CACzCiC,MAAO,0BACPE,KAAM,SACND,MAAO,aACPQ,aAAc,CACV,CAACvG,OAAO,EAAMwG,KAAM,QACpB,CAACxG,OAAO,EAAOwG,KAAM,QAASC,UAAU,IAE5CG,sBAAuB,CACnBC,MAAS,CACL,kCACA,uCACA,yCAIR9H,SAAS,EACLiB,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GAEN,IAAIrG,EAEJ,IACIA,EAAQ0G,KAAKC,MAAMN,GACrB,MACErG,EAAQqG,EAGZF,KAAKC,cAAgBD,KAAKN,WAAa7F,IAG/C8D,gCAAiC,CAC7BgC,MAAO,0BACPC,MAAO,OACPC,KAAM,QACNjH,QAAS,GACTpB,IAAK,EACLC,IAAK,EACLF,KAAM,KACN4I,WAAY,CAAC,IACTtG,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GAEN,IAAIrG,EAAQ9C,KAAKU,IAAIV,KAAKS,IAAI0I,EAAGF,KAAKvI,KAAMuI,KAAKxI,KACjDwI,KAAKN,WAAa7F,EAGdA,EADAA,EAAQ,IACqD,GAApD,GAAM,GAAMA,GAAS,GAAG,GAEzB,GAAMA,EAAM,IAAO,GAAG,EAGlCmG,KAAKC,cAAgBpG,IAG7B+D,qCAAsC,CAClC+B,MAAO,0BACPE,KAAM,QACND,MAAO,OACPhH,QAAS,EACTpB,IAAK,EACLC,IAAK,EACLF,KAAM,KACFsC,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GACNF,KAAKC,cAAgBD,KAAKN,WAAa3I,KAAKU,IAAIV,KAAKS,IAAI0I,EAAGF,KAAKvI,KAAMuI,KAAKxI,OAGpFqG,qCAAsC,CAClC8B,MAAO,0BACPE,KAAM,QACND,MAAO,KACPhH,QAAS,EACTpB,IAAK,EACLC,IAAK,EACLF,KAAM,KACFsC,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GACNF,KAAKC,cAAgBD,KAAKN,WAAa3I,KAAKU,IAAIV,KAAKS,IAAI0I,EAAGF,KAAKvI,KAAMuI,KAAKxI,OAGpFkE,sBAAuB,CACnBiE,MAAO,wBACPE,KAAM,SACNO,aAAc,CACV,CAACvG,OAAO,EAAMwG,KAAM,QACpB,CAACxG,OAAO,EAAOwG,KAAM,QAASC,UAAU,IAE5CG,sBAAuB,CACnBC,MAAS,KAEb9H,SAAS,EACLiB,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GAEN,IAAIrG,EAEJ,IACIA,EAAQ0G,KAAKC,MAAMN,GACrB,MACErG,EAAQqG,EAGZF,KAAKC,cAAgBD,KAAKN,WAAa7F,IAG/CyE,gCAAiC,CAC7BqB,MAAO,wBACPE,KAAM,QACND,MAAO,sBACPhH,QAAS,EACTpB,IAAK,EACLC,IAAK,EACLF,KAAM,KACFsC,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GACNF,KAAKC,cAAgBD,KAAKN,WAAa3I,KAAKU,IAAIV,KAAKS,IAAI0I,EAAGF,KAAKvI,KAAMuI,KAAKxI,OAGpFmE,8BAA+B,CAC3BgE,MAAO,wBACPE,KAAM,SACNQ,KAAM,OACNzH,SAAS,EACLiB,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GACNF,KAAKC,cAAgBC,GAEzBS,QAAS,WAELC,uBAAqB,KACjBtH,EAAKgG,EAAQ,CAAC7F,cAAc,SAIxCqE,0CAA2C,CACvC6B,MAAO,wBACPE,KAAM,SACND,MAAO,aACPQ,aAAc,CACV,CAACvG,OAAO,EAAMwG,KAAM,QACpB,CAACxG,OAAO,EAAOwG,KAAM,QAASC,UAAU,IAE5CG,sBAAuB,CACnBC,MAAS,CACL,gCACA,qCACA,uCAIR9H,SAAS,EACLiB,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GAEN,IAAIrG,EAEJ,IACIA,EAAQ0G,KAAKC,MAAMN,GACrB,MACErG,EAAQqG,EAGZF,KAAKC,cAAgBD,KAAKN,WAAa7F,IAG/CkE,8BAA+B,CAC3B4B,MAAO,wBACPC,MAAO,OACPC,KAAM,QACNjH,QAAS,GACTpB,IAAK,EACLC,IAAK,EACLF,KAAM,KACN4I,WAAY,CAAC,IACTtG,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GAEN,IAAIrG,EAAQ9C,KAAKU,IAAIV,KAAKS,IAAI0I,EAAGF,KAAKvI,KAAMuI,KAAKxI,KACjDwI,KAAKN,WAAa7F,EAGdA,EADAA,EAAQ,IACqD,GAApD,GAAM,GAAMA,GAAS,GAAG,GAEzB,GAAMA,EAAM,IAAO,GAAG,EAGlCmG,KAAKC,cAAgBpG,IAG7BmE,mCAAoC,CAChC2B,MAAO,wBACPE,KAAM,QACND,MAAO,OACPhH,QAAS,EACTpB,IAAK,EACLC,IAAK,EACLF,KAAM,KACFsC,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GACNF,KAAKC,cAAgBD,KAAKN,WAAa3I,KAAKU,IAAIV,KAAKS,IAAI0I,EAAGF,KAAKvI,KAAMuI,KAAKxI,OAGpFyG,mCAAoC,CAChC0B,MAAO,wBACPE,KAAM,QACND,MAAO,KACPhH,QAAS,EACTpB,IAAK,EACLC,IAAK,EACLF,KAAM,KACFsC,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GACNF,KAAKC,cAAgBD,KAAKN,WAAa3I,KAAKU,IAAIV,KAAKS,IAAI0I,EAAGF,KAAKvI,KAAMuI,KAAKxI,OAGpFoE,6BAA8B,CAC1B+D,MAAO,2BACPC,MAAO,OACPC,KAAM,SACNO,aAAc,CACV,CAACvG,OAAO,EAAOwG,KAAM,OAAQC,UAAU,GACvC,CAACzG,MAAO,gBAAiBwG,KAAM,iBAC/B,CAACxG,MAAO,cAAewG,KAAM,gBAEjCI,sBAAuB,CACnBC,MAAS,IACTG,YAAe,CACX,qCAGRjI,SAAS,EACLiB,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GAEN,IAAIrG,EAEJ,IACIA,EAAQ0G,KAAKC,MAAMN,GACrB,MACErG,EAAQqG,EAGZF,KAAKC,cAAgBD,KAAKN,WAAa7F,EAEnCA,GACA+G,uBAAqB,KACjBtH,EAAKgG,EAAQ,CAAC5F,iBAAiB,SAK/C0E,+BAAgC,CAC5BuB,MAAO,2BACPE,KAAM,QACND,MAAO,kBACPhH,QAAS,GACTpB,IAAK,EACLC,IAAK,EACLF,KAAM,KACFsC,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GACNF,KAAKC,cAAgBD,KAAKN,WAAa3I,KAAKU,IAAIV,KAAKS,IAAI0I,EAAGF,KAAKvI,KAAMuI,KAAKxI,OAGpFqE,iCAAkC,CAC9B8D,MAAO,2BACPE,KAAM,SACNQ,KAAM,OACNzH,SAAS,EACLiB,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GACNF,KAAKC,cAAgBC,GAEzBS,QAAS,WAELC,uBAAqB,KACjBtH,EAAKgG,EAAQ,CAAC5F,iBAAiB,SAI3CuC,YAAa,CACT0D,MAAO,cACPE,KAAM,SACNjH,QAAS,EACTnB,IAAK,IACLD,IAAK,EACLD,KAAM,KACFsC,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GACN,IAAIrG,EAAQmG,KAAKN,WAAa3I,KAAKU,IAAIV,KAAKS,IAAI0I,EAAGF,KAAKvI,KAAMuI,KAAKxI,KACnEwI,KAAKC,cAAiBX,EAAO1F,WAAWC,MAAQA,EAAS,OAGjEwC,sBAAuB,CACnBsD,MAAO,cACPE,KAAM,SACND,MAAO,aACPQ,aAAc,CACV,CAACvG,OAAO,EAAMwG,KAAM,QACpB,CAACxG,OAAO,EAAOwG,KAAM,QAASC,UAAU,IAE5CG,sBAAuB,CACnBC,MAAS,CACL,kBACA,uBACA,yBAIR9H,SAAS,EACLiB,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GAEN,IAAIrG,EAEJ,IACIA,EAAQ0G,KAAKC,MAAMN,GACrB,MACErG,EAAQqG,EAGZF,KAAKC,cAAgBD,KAAKN,WAAa7F,IAG/CqC,gBAAiB,CACbyD,MAAO,cACPC,MAAO,OACPC,KAAM,QACNjH,QAAS,GACTpB,IAAK,EACLC,IAAK,EACLF,KAAM,KACN4I,WAAY,CAAC,IACTtG,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GAEN,IAAIrG,EAAQ9C,KAAKU,IAAIV,KAAKS,IAAI0I,EAAGF,KAAKvI,KAAMuI,KAAKxI,KACjDwI,KAAKN,WAAa7F,EAGdA,EADAA,EAAQ,IACqD,GAApD,GAAM,GAAMA,GAAS,GAAG,GAEzB,GAAMA,EAAM,IAAO,GAAG,EAGlCmG,KAAKC,cAAgBpG,IAG7BsC,qBAAsB,CAClBwD,MAAO,cACPE,KAAM,QACND,MAAO,OACPhH,QAAS,EACTpB,IAAK,EACLC,IAAK,EACLF,KAAM,KACFsC,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GACNF,KAAKC,cAAgBD,KAAKN,WAAa3I,KAAKU,IAAIV,KAAKS,IAAI0I,EAAGF,KAAKvI,KAAMuI,KAAKxI,OAGpF4E,qBAAsB,CAClBuD,MAAO,cACPE,KAAM,QACND,MAAO,KACPhH,QAAS,EACTpB,IAAK,EACLC,IAAK,EACLF,KAAM,KACFsC,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GACNF,KAAKC,cAAgBD,KAAKN,WAAa3I,KAAKU,IAAIV,KAAKS,IAAI0I,EAAGF,KAAKvI,KAAMuI,KAAKxI,OAGpFsJ,YAAa,CACTjB,KAAM,SACND,MAAO,OACPQ,aAAc,CACV,CAACvG,MAAO,KAAMwG,KAAM,MACpB,CAACxG,MAAO,MAAOwG,KAAM,OACrB,CAACxG,OAAO,EAAOwG,KAAM,OAAQC,UAAU,IAE3C1H,SAAS,EACLiB,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GAEN,IAAIrG,EAEJ,IACIA,EAAQ0G,KAAKC,MAAMN,GACrB,MACErG,EAAQqG,EAGZF,KAAKC,cAAgBD,KAAKN,WAAa7F,IAG/CC,gBAAiB,CACb+F,KAAM,SACNO,aAAc,CACV,CAACvG,OAAO,EAAMwG,KAAM,QACpB,CAACxG,OAAO,EAAOwG,KAAM,QAASC,UAAU,IAE5C1H,SAAS,EACLiB,YACA,OAAOmG,KAAKC,eAEZpG,UAAMqG,GAEN,IAAIrG,EAEJ,IACIA,EAAQ0G,KAAKC,MAAMN,GACrB,MACErG,EAAQqG,EAGZF,KAAKC,cAAgBD,KAAKN,WAAa7F,IAG/CkH,cAAe,CACXpB,MAAO,gBACPE,KAAM,SACNQ,KAAM,WACNM,QAAS,WACLpK,EAAEC,OAAOwK,QAAOC,IAEZ,IAAI9I,EAAIhC,SAAS+K,cAAc,KAC/B/I,EAAEgJ,KAAOC,IAAIC,gBAAgBJ,GAC7B9I,EAAEmJ,aAAa,WAAY,IAC3BnJ,EAAEoJ,QACFH,IAAII,gBAAgBrJ,EAAEgJ,QAEvB,gBChtBf,MAAMM,EAAkB,SAAUC,GAE9B,IAAIC,EAAS,CAAC,GAAIC,EAAO,GAUzB,OARAtG,MAAMuG,KAAKH,GAAK5F,SAAO,CAAEgG,EAAMzK,KACvByK,EAAKC,gBAAkBD,GAAMH,EAAOpH,KAAKlD,MAGjDsK,EAAO7F,SAAO,CAAEkG,EAAS3K,KACrBuK,GAAQ,SAAWF,EAAIO,MAAMD,EAASL,EAAOtK,EAAI,IAAM,aAGpDuK,GCPX,IAAIM,EAAa,KACbC,GAAQ,EAEZhM,SAASiM,iBAAiB,WAAYC,IAE7BF,IACDD,EAAaG,EAAEC,IACfH,GAAQ,MAKhBhM,SAASiM,iBAAiB,SAAO,KAC7BF,EAAa,KACbC,GAAQ,KAGZ,MAAMI,EAAyC,SAAU7J,EAAQ8J,GAE7D,MAAMC,EAAa/J,EAAO8J,GACpBE,EAAYD,EAAW9C,MAE7B,GAAI8C,EAAWE,eAAe,SAAU,CAEpC,MAAMC,EAAUzM,SAAS0M,iBAAiB,IAAMH,EAAY,WACtDI,EAAmB,GAEzBF,EAAQ9G,SAAQiH,IAEZ,MAAMtD,EAAQ/G,EAAOqK,EAAOC,aAAa,aAEzC,GAAIvD,EAAMkD,eAAe,yBAA0B,CAE/C,MAAM9I,EAAQ4F,EAAM5F,MAAMoJ,WAE1B9M,SAAS0M,iBAAiB,IAAMH,EAAY,8BAAgCjD,EAAMD,UAAY,OAAO1D,SAAQoH,IAEzG,IAAIC,EAAOD,EAAMF,aAAa,YAC1BI,GAAW,EAEX3D,EAAMgB,sBAAsBkC,eAAe9I,KAAW4F,EAAMgB,sBAAsB5G,GAAOwJ,SAASF,IAAgD,MAAvC1D,EAAMgB,sBAAsB5G,MACvIuJ,GAAW,GAGfN,EAAiBK,GAAQL,EAAiBH,eAAeQ,GAAQL,EAAiBK,IAASC,EAAWA,SAQlH,IAAK,IAAIE,KAAQR,EAAkB,CAE/B,MAAMI,EAAQ/M,SAASC,cAAc,cAAgBkN,EAAO,MAI5D,GAFAJ,EAAMK,UAAYT,EAAiBQ,IAE9BJ,EAAMM,cAAcC,UAAUC,SAAShB,GAAY,CAEpD,MAAM9C,EAAQsD,EAAMM,cAAcpN,cAAc,UAE5CwJ,IACAkD,EAAiBQ,GAAQ1D,EAAM6D,UAAUE,OAAO,YAAc/D,EAAM6D,UAAUG,IAAI,iBAWhGC,EAAe,SAAUxB,GAE3B,MAAMyB,EAASzB,EAAEyB,OACjB,IAgCIC,EAhCAvE,EAAYsE,EAAOd,aAAa,YAChCvD,EAAQH,EAAOE,GACfwE,EAAWF,EAAOjK,MAEtB,GAAoB,UAAhBiK,EAAOjE,MAAoBJ,EAAMkD,eAAe,eAAgC,YAAfT,EAA0B,CAE3F,IAAIrI,EAA4C,IAAnCmK,EAAWjN,KAAKkN,IAAIH,EAAOtM,OAAcsM,EAAOrM,IAAMV,KAAKkN,IAAIH,EAAOtM,MAE/E0M,GAAQ,EACR7M,EAAI,OAEDA,EAAIoI,EAAMU,WAAWnF,SAAWkJ,GAAO,CAE1C,IAAIC,EAA2D,IAA9C1E,EAAMU,WAAW9I,GAAKN,KAAKkN,IAAIH,EAAOtM,OAAcsM,EAAOrM,IAAMV,KAAKkN,IAAIH,EAAOtM,MAE9FqC,EAAQsK,EAAY,MAAStK,EAAQsK,EAAY,OACjD1E,EAAM5F,MAAQiK,EAAOjK,MAAQ4F,EAAMU,WAAW9I,GAC9C6M,GAAQ,GAGZ7M,IAIA6M,IAAOzE,EAAM5F,MAAQmK,QAGzBvE,EAAM5F,MAAQmK,EAGlBzB,EAAuCjD,EAAQE,GAI7B,oBAAdA,GACiB,8BAAdA,IACgB,sBAAdA,GAAmD,wBAAdA,IAAwCF,EAAOrE,0BAA0BpB,MAEnHkK,EAAY,CAAEvK,gBAAgB,EAAMC,cAAc,GAC7B,eAAd+F,IACPuE,EAAY,CAAEvK,gBAAgB,EAAMC,cAAc,EAAMC,iBAAiB,IAG7EkH,uBAAqB,KACjBtH,EAAKgG,EAAQyE,OCzHrB,IAAIK,EAAQjO,SAAS+K,cAAc,SACnCkD,EAAMvE,KAAO,SACbuE,EAAMC,MAAMC,SAAW,QACvBnO,SAASoO,gBAAgBC,OAAOJ,GAChC,MAAMK,EAAoBL,EAAMM,aAChCN,EAAMT,SAENxN,SAASwO,KAAKN,MAAMO,YAAY,wBAAyBH,EAAoB,MAE7EL,EAAMvE,KAAO,QACbuE,EAAMC,MAAMQ,eAAe,aAC3B1O,SAASoO,gBAAgBC,OAAOJ,GAChC,MAAMU,EAAmBV,EAAMM,aAC/BN,EAAMT,SAENxN,SAASwO,KAAKN,MAAMO,YAAY,uBAAwBE,EAAmB,MD8GxD,SAAUpM,GACzB,IAAK,IAAI+G,KAAS/G,EAAQ,CAEtB,IAMIqM,EAAUC,EANVC,EAAUvM,EAAO+G,GAQrB,GANAwF,EAAQzF,UAAYC,EAEhBwF,EAAQtC,eAAe,aAAYsC,EAAQpL,MAAQoL,EAAQrM,SAI3DqM,EAAQtC,eAAe,SAAU,CAEjC,IAAIhD,EAAQxJ,SAASC,cAAc,IAAM6O,EAAQtF,OAEjD,GAAIA,EAAOoF,EAAWpF,MACjB,CAEDoF,EAAW5O,SAAS+K,cAAc,YAClC6D,EAAStB,UAAUG,IAAIqB,EAAQtF,OAC/B,IAAIuF,EAAS/O,SAAS+K,cAAc,UACpCgE,EAAOC,UAAY1D,EAAgBwD,EAAQtF,OAC3CoF,EAASP,OAAOU,QAGjB,CACHH,EAAW5O,SAAS+K,cAAc,YAClC,IAAIgE,EAAS/O,SAAS+K,cAAc,UACpCgE,EAAOC,UAAY1D,EAAgBhC,GACnCsF,EAASP,OAAOU,GAGpB,GAAqB,WAAjBD,EAAQpF,KAERmF,EAAM7O,SAAS+K,cAAc,UAC7B8D,EAAIG,UAAYF,EAAQ5E,KACxB2E,EAAI5C,iBAAiB,QAAS6C,EAAQtE,SACtCqE,EAAI1D,aAAa,WAAY7B,QAE1B,GAAqB,WAAjBwF,EAAQpF,KAEfmF,EAAM7O,SAAS+K,cAAc,UAE7B+D,EAAQ7E,aAAatE,SAAQjC,IACzBmL,EAAIG,WAAS,WAAetL,EAAM8I,eAAe,aAAe9I,EAAMyG,SAAW,WAAa,aAAazG,EAAMA,UAAUA,EAAMwG,mBAGrI2E,EAAI5C,iBAAiB,QAASyB,GAC9BmB,EAAI1D,aAAa,WAAY7B,OAE1B,CAEHuF,EAAM7O,SAAS+K,cAAc,SAE7B8D,EAAInF,KAAOoF,EAAQpF,KAEfoF,EAAQtC,eAAe,UAASqC,EAAIzN,KAAO0N,EAAQ1N,MAEnD0N,EAAQtC,eAAe,SAAQqC,EAAIxN,IAAMyN,EAAQzN,KACjDyN,EAAQtC,eAAe,SAAQqC,EAAIvN,IAAMwN,EAAQxN,KAErDuN,EAAInL,MAAQoL,EAAQvF,WAEpBsF,EAAI5C,iBAAiB,QAASyB,GAC9BmB,EAAI1D,aAAa,WAAY7B,GAE7B,IAAI2F,EAAYjP,SAAS+K,cAAc,OACvCkE,EAAU3B,UAAUG,IAAI,mBAEP,UAAboB,EAAInF,KAAkBuF,EAAU3B,UAAUG,IAAI,SAC5B,WAAboB,EAAInF,MAAmBuF,EAAU3B,UAAUG,IAAI,UAExDwB,EAAUZ,OAAOQ,GACjBA,EAAMI,EAGV,GAAIH,EAAQtC,eAAe,SAAU,CACjC,IAAI0C,EAAgBlP,SAAS+K,cAAc,YACvCtB,EAAQzJ,SAAS+K,cAAc,UACnCtB,EAAMuF,UAAY1D,EAAgBwD,EAAQrF,OAC1CyF,EAAcb,OAAO5E,GACrByF,EAAcb,OAAOQ,GACrBA,EAAMK,EAGVN,EAASP,OAAOQ,GAChBzO,EAAEG,aAAa8N,OAAOO,GAI1B,IAAK,IAAIO,KAAS5M,EAEd6J,EAAuC7J,EAAQ4M,GCxMvDC,CAAWjG,GAEXsB,uBAAqB,KACjBtH,EAAKgG","sources":["src/script/modules/global_var.js","src/script/modules/geometry_functions.js","src/script/modules/draw.js","src/script/modules/parameters.js","src/script/modules/utils.js","src/script/modules/generate_ui.js","src/script/index.js"],"sourcesContent":["const canvas = document.querySelector('canvas');\r\nconst ctx = canvas.getContext('2d');\r\n\r\nconst _ = {\r\n    canvas : canvas,\r\n    ctx: ctx,\r\n    paramsWindow: document.getElementById('params')\r\n}\r\n\r\nexport { _ };","import { _ } from \"./global_var\";\r\n\r\nconst dist = function (p1, p2) {\r\n    return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2))\r\n}\r\n\r\nconst getValueFromEase = function (i, power, step, min, max) {\r\n\r\n    let ease;\r\n\r\n    if (power < 0) {\r\n        ease = 1 - Math.pow(1 - (i * step), power * -1)\r\n    } else {\r\n        ease = Math.pow(i * step, power);\r\n    }\r\n\r\n    return Math.round((min + (ease * (max - min))) * 1000) / 1000;\r\n}\r\n\r\nconst offsetPointOnAxis = function (pRef1, pRef2, pTarget, offset = 0, useYasInput = false) {\r\n    \r\n    let na = Math.max(pRef1.x > pRef2.x ? pRef1.x - pRef2.x : pRef2.x - pRef1.x, 1);\r\n    let c = pRef1.x > pRef2.x ? pRef1.y - pRef2.y : pRef2.y - pRef1.y;\r\n    let a = c / na;\r\n    let b = pRef1.y - a * pRef1.x;\r\n\r\n    let x, y;\r\n\r\n\r\n    if (!useYasInput) {\r\n\r\n        x = pTarget.x + offset;\r\n        y = a * x + b\r\n\r\n    } else {\r\n\r\n        y = pTarget.y + offset;\r\n        x = (y - b) / a\r\n    }\r\n\r\n    return { x: x, y: y };\r\n\r\n}\r\n\r\nconst getControlPoints = function (pBefore, pCurrent, pAfter, distFromCurrentFactor = params.smoothness.initial) {\r\n\r\n    let beforeToCurrentMid = { x: (pBefore.x + pCurrent.x) / 2, y: (pBefore.y + pCurrent.y) / 2 };\r\n\r\n    let currentToAfterMid = { x: (pCurrent.x + pAfter.x) / 2, y: (pCurrent.y + pAfter.y) / 2 };\r\n\r\n    let newCurrent = { x: (beforeToCurrentMid.x + currentToAfterMid.x) / 2, y: (beforeToCurrentMid.y + currentToAfterMid.y) / 2 };\r\n    \r\n    let beforeToCurrentDist = dist(beforeToCurrentMid, newCurrent);\r\n    let currentToAfterDist = dist(newCurrent, currentToAfterMid);\r\n\r\n    let DXgreaterThanDYBefore = Math.max(beforeToCurrentMid.x, newCurrent.x) - Math.min(beforeToCurrentMid.x, newCurrent.x) >= Math.max(beforeToCurrentMid.y, newCurrent.y) - Math.min(beforeToCurrentMid.y, newCurrent.y);\r\n\r\n    let DXgreaterThanDYAfter = Math.max(currentToAfterMid.x, newCurrent.x) - Math.min(currentToAfterMid.x, newCurrent.x) >= Math.max(currentToAfterMid.y, newCurrent.y) - Math.min(currentToAfterMid.y, newCurrent.y);\r\n\r\n    let dirBefore, dirAfter;\r\n\r\n    if (DXgreaterThanDYBefore) {\r\n        dirBefore = beforeToCurrentMid.x < newCurrent.x ? 1 : -1;\r\n    } else {\r\n        dirBefore = beforeToCurrentMid.y < newCurrent.y ? 1 : -1;\r\n    }\r\n\r\n    if (DXgreaterThanDYAfter) {\r\n        dirAfter = currentToAfterMid.x > newCurrent.x ? 1 : -1;\r\n    } else {\r\n        dirAfter = currentToAfterMid.y > newCurrent.y ? 1 : -1;\r\n    }\r\n\r\n    let cpl = offsetPointOnAxis(beforeToCurrentMid, currentToAfterMid, newCurrent, -dirBefore * beforeToCurrentDist * 0.552 * distFromCurrentFactor, !DXgreaterThanDYBefore);\r\n\r\n    let cpr = offsetPointOnAxis(beforeToCurrentMid, currentToAfterMid, newCurrent, dirAfter * currentToAfterDist * 0.552 * distFromCurrentFactor, !DXgreaterThanDYAfter);\r\n\r\n    return { cpl, cpr, x: newCurrent.x , y: newCurrent.y};\r\n\r\n}\r\n\r\nconst getPoints = function (radius, pointsNumber, randomPointsInterval, randomPointsHeight, randomCirclesRotation, currentCircleIteration, params) {\r\n\r\n    if (params.adaptativePointsPerCircle.value && pointsNumber !== randomPointsInterval.length) {\r\n        pointsNumber = randomPointsInterval.length;\r\n    }\r\n    \r\n    let pointStep = 360 / pointsNumber;\r\n    let circleStep = 1 / params.iterations.value;\r\n\r\n    let originFromCenter = (params.biggestCircleScale.value / 2 - radius) * params.distanceFromCenter.value;\r\n    let originX = _.canvas.width / 2 + (originFromCenter * Math.cos(params.originRotate.value * Math.PI / 180));\r\n    let originY = _.canvas.height / 2 + (originFromCenter * Math.sin(params.originRotate.value * Math.PI / 180));\r\n\r\n    let points = [], pointsWithCp = [], linkPointsIntervalRandomizationFactorToEaseFactor = 1, linkPointsHeightRandomizationFactorToEaseFactor = 1;\r\n\r\n    let rotationVariation = randomCirclesRotation ? randomCirclesRotation : 0;\r\n\r\n    if (params.circlesRotationVariationType.value === \"progression\") {\r\n        rotationVariation = Math.round(currentCircleIteration / (params.iterations.value - 1) * 100) / 100;\r\n    }\r\n\r\n    if (params.linkPointsIntervalRandomizationFactorToEase.value) {\r\n\r\n        linkPointsIntervalRandomizationFactorToEaseFactor = getValueFromEase(currentCircleIteration, params.pointsIntervalRandomizationEase.value, circleStep, params.pointsIntervalRandomizationMinFactor.value, params.pointsIntervalRandomizationMaxFactor.value);\r\n    }\r\n\r\n    if (params.linkPointsHeightRandomizationFactorToEase.value) {\r\n\r\n        linkPointsHeightRandomizationFactorToEaseFactor = getValueFromEase(currentCircleIteration, params.pointsHeightRandomizationEase.value, circleStep, params.pointsHeightRandomizationMinFactor.value, params.pointsHeightRandomizationMaxFactor.value);\r\n    }\r\n\r\n    for (let i = 0; i < pointsNumber; i++){\r\n\r\n        let rotateOffset = (params.randomizePointsInterval.value ? pointStep / 2 * (randomPointsInterval ? randomPointsInterval[i] : 0) * params.pointsIntervalRandomizationFactor.value * linkPointsIntervalRandomizationFactorToEaseFactor : 0) + (params.circlesRotationVariationType.value ? 360 * rotationVariation * params.circlesRotationVariationFactor.value : 0);\r\n        \r\n        let distOffset = params.randomizePointsHeight.value ? (randomPointsHeight ? randomPointsHeight[i] : 0) * radius * params.pointsHeightRandomizationFactor.value * linkPointsHeightRandomizationFactorToEaseFactor : 0;\r\n\r\n        let x = originX + (radius + distOffset) * Math.cos((i * pointStep + rotateOffset) * Math.PI / 180);\r\n        let y = originY + (radius + distOffset) * Math.sin((i * pointStep + rotateOffset) * Math.PI / 180);\r\n\r\n        points.push({ x: x, y: y, angle: i * pointStep });\r\n        \r\n    }\r\n\r\n    points.forEach((point, i) => {\r\n        \r\n        let pointBefore = i > 0 ? points[i - 1] : points[points.length - 1];\r\n\r\n        let pointAfter = i < points.length - 1 ? points[i + 1] : points[0];\r\n\r\n        pointsWithCp.push(getControlPoints(pointBefore, point, pointAfter, params.smoothness.value));\r\n    });\r\n\r\n    return pointsWithCp;\r\n}\r\n\r\nconst getCirclesRadius = function (params) {\r\n\r\n    let number = params.iterations.value;\r\n\r\n    let step = 1 / Math.max(number - 1, 1);\r\n\r\n    let radius = [];\r\n\r\n    for (let i = 0; i < number; i++){\r\n\r\n        radius.push(getValueFromEase(i, params.circleSpacingEase.value, step, params.smallestCircleScale.value / 2, params.biggestCircleScale.value / 2));\r\n    }\r\n\r\n    return radius;\r\n}\r\n\r\nconst getPointsNumber = function (params, circleRadius) {\r\n\r\n    let arr = [];\r\n    const biggestCircleScale = params.biggestCircleScale.value / 2;\r\n    const maxPointsPerCircle = params.pointsPerCircle.value;\r\n\r\n    for (let i = 0; i < circleRadius.length; i++){\r\n\r\n        let value;\r\n\r\n        if (params.adaptativePointsPerCircle.value) {\r\n           \r\n            value = Math.floor(params.pointsPerCircle.min + (circleRadius[i] / biggestCircleScale) * (maxPointsPerCircle - params.pointsPerCircle.min));\r\n\r\n        } else {\r\n            value = maxPointsPerCircle;\r\n        }\r\n\r\n        arr.push(value);\r\n    }\r\n\r\n    return arr;\r\n}\r\n\r\nexport { dist, offsetPointOnAxis, getControlPoints, getPoints, getCirclesRadius, getPointsNumber, getValueFromEase };","import { _ } from \"./global_var\";\r\nimport { getCirclesRadius, getPointsNumber, getPoints, getValueFromEase } from \"./geometry_functions\";\r\n\r\nconst draw = function (params, generateNewSeed = { pointsInterval: false, pointsHeight: false, circlesRotation: false }) {\r\n\r\n    _.ctx.clearRect(0, 0, params.resolution.value, params.resolution.value);\r\n\r\n    if (!params.alphaBackground.value) {\r\n        _.ctx.fillStyle = \"white\";\r\n        _.ctx.fillRect(0, 0, _.canvas.width, _.canvas.height);\r\n    }\r\n\r\n    const circlesRadius = getCirclesRadius(params);\r\n\r\n    const pointsPerCircle = getPointsNumber(params, circlesRadius);\r\n\r\n    let newRandomPointsInterval = generateNewSeed.pointsInterval || (params.randomizePointsInterval.value && !params.pointsIntervalRandomizationSeed.value);\r\n\r\n    if (newRandomPointsInterval) {\r\n        \r\n        let arr = [];\r\n\r\n        for (let i = 0; i < params.iterations.value; i++) {\r\n            arr.push(Array.apply(null, Array(pointsPerCircle[i])).map(() => -1 + 2 * Math.random()))\r\n        }\r\n\r\n        params.pointsIntervalRandomizationSeed.value = arr;\r\n    }\r\n\r\n    let newRandomPointsHeight = generateNewSeed.pointsHeight || (params.randomizePointsHeight.value && !params.pointsHeightRandomizationSeed.value);\r\n\r\n    if (newRandomPointsHeight) {\r\n        \r\n        let arr = [];\r\n\r\n        for (let i = 0; i < params.iterations.value; i++) {\r\n            arr.push(Array.apply(null, Array(pointsPerCircle[i])).map(() => -1 + 2 * Math.random()))\r\n        }\r\n\r\n        params.pointsHeightRandomizationSeed.value = arr;\r\n    }\r\n\r\n    let newRandomCirclesRotation = generateNewSeed.circlesRotation || (params.circlesRotationVariationType.value === \"randomization\" && !params.circlesRotationRandomizationSeed.value);\r\n\r\n    if (newRandomCirclesRotation) {\r\n\r\n        let arr = [];\r\n\r\n        for (let i = 0; i < params.iterations.value; i++) {\r\n            arr.push(Math.random());\r\n        }\r\n\r\n        params.circlesRotationRandomizationSeed.value = arr;\r\n\r\n    }\r\n\r\n    circlesRadius.forEach((circleRadius, i) => {\r\n\r\n        let lineWidth = params.strokeWidth.value;\r\n\r\n        let ease = Math.max(getValueFromEase(i, params.strokeWidthEase.value, 1 / (params.iterations.value - 1), params.strokeWidthMinFactor.value, params.strokeWidthMaxFactor.value), 10e-4);\r\n\r\n        if (params.linkStrokeWidthToEase.value) lineWidth *= ease;\r\n\r\n        _.ctx.lineWidth = lineWidth;\r\n\r\n        let points = getPoints(circleRadius, pointsPerCircle[i], params.pointsIntervalRandomizationSeed.value[i], params.pointsHeightRandomizationSeed.value[i], params.circlesRotationRandomizationSeed.value[i], i, params);\r\n\r\n        _.ctx.beginPath();\r\n        \r\n        points.forEach((point, i) => {\r\n\r\n            if (i === 0) _.ctx.moveTo(point.x, point.y);\r\n\r\n            if (params.smoothness.value === 0) {\r\n                \r\n                _.ctx.lineTo(point.x, point.y);\r\n                \r\n            } else if (i > 0) {\r\n\r\n                let cpStart = points[i - 1].cpr;\r\n                let cpEnd = point.cpl;\r\n\r\n                _.ctx.bezierCurveTo(cpStart.x, cpStart.y, cpEnd.x, cpEnd.y, point.x, point.y);\r\n            }\r\n        });\r\n\r\n        if (params.smoothness.value > 0) {\r\n            _.ctx.bezierCurveTo(points[points.length - 1].cpr.x, points[points.length - 1].cpr.y, points[0].cpl.x, points[0].cpl.y, points[0].x, points[0].y);\r\n        } else {\r\n            _.ctx.closePath();\r\n        }\r\n        //_.ctx.fillStyle = \"white\";\r\n        //_.ctx.fill();\r\n        _.ctx.stroke();\r\n\r\n        //if (params.clipCircles.value === \"in\") _.ctx.globalCompositeOperation = \"destination-atop\";\r\n\r\n        /*points.forEach((point, i) => {\r\n\r\n           \r\n                _.ctx.beginPath();\r\n                _.ctx.fillStyle = point.color;\r\n                _.ctx.arc(point.x, point.y, 2, 0, 180);\r\n                _.ctx.fill();\r\n\r\n                _.ctx.beginPath();\r\n                _.ctx.fillStyle = \"blue\"\r\n                _.ctx.arc(point.cpl.x, point.cpl.y, 2, 0, 180);\r\n                _.ctx.fill();\r\n\r\n                _.ctx.beginPath();\r\n                _.ctx.fillStyle = \"blue\"\r\n                _.ctx.arc(point.cpr.x, point.cpr.y, 2, 0, 180);\r\n                _.ctx.fill();\r\n                \r\n                _.ctx.beginPath();\r\n                _.ctx.moveTo(point.cpl.x, point.cpl.y);\r\n                _.ctx.lineTo(point.cpr.x, point.cpr.y);\r\n                _.ctx.stroke()\r\n            \r\n            \r\n        })*/\r\n    })\r\n    \r\n};\r\n\r\nexport { draw };","import { _ } from \"./global_var\";\r\nimport { draw } from \"./draw\";\r\n\r\nlet params;\r\nconst MAX_EASE_POWER = 10;\r\n\r\nconst forceRecompute = function (paramName) {\r\n\r\n    let param = params[paramName];\r\n\r\n    if (param.inputValue) param.value = param.inputValue;\r\n\r\n}\r\n\r\nparams = {\r\n    resolution: {\r\n        group: \"downloadImage\",\r\n        label: \"resolution\",\r\n        type: \"number\",\r\n        initial: window.innerHeight,\r\n        min: 1,\r\n        max: 6000,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            let value = Math.max(Math.min(v, this.max), this.min);\r\n            this.computedValue = this.inputValue = _.canvas.width = _.canvas.height = value;\r\n\r\n            forceRecompute(\"biggestCircleScale\");\r\n            forceRecompute(\"strokeWidth\");\r\n        }\r\n    },\r\n    biggestCircleScale: {\r\n        type: \"range\",\r\n        initial: 0.75,\r\n        min: 0,\r\n        max: 2,\r\n        step: 0.001,\r\n        stepValues: [0.25, 1/3, 0.5, 2/3, 0.75, 1],\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            let value = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n            this.computedValue = value * params.resolution.value;\r\n\r\n            forceRecompute(\"smallestCircleScale\");\r\n        }\r\n    },\r\n    smallestCircleScale: {\r\n        type: \"range\",\r\n        initial: 0.4,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.001,\r\n        stepValues: [0.25, 1/3, 0.5, 2/3, 0.75],\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            let value = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n            this.computedValue = value * params.biggestCircleScale.value;\r\n        }\r\n    },\r\n    originRotate: {\r\n        group: \"origin\",\r\n        type: \"range\",\r\n        label: \"rotate\",\r\n        initial: 60,\r\n        min: 0,\r\n        max: 360,\r\n        step: 0.001,\r\n        stepValues: [45, 90, 135, 180, 225, 270, 315],\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    distanceFromCenter: {\r\n        group: \"origin\",\r\n        type: \"range\",\r\n        label: \"distanceFromCenter\",\r\n        initial: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.001,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    iterations: {\r\n        type: \"number\",\r\n        initial: 20,\r\n        min: 1,\r\n        step: 1,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(v, this.min);\r\n        }\r\n    },\r\n    circleSpacingEase: {\r\n        group: \"circleSpacing\",\r\n        label: \"ease\",\r\n        type: \"range\",\r\n        initial: 0.5,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.001,\r\n        stepValues: [0.5],\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let value = Math.max(Math.min(v, this.max), this.min);\r\n            this.inputValue = value;\r\n\r\n            if (value < 0.5) {\r\n                value = (1 + ((0.5 - value) / 0.5) * (MAX_EASE_POWER - 1)) * -1;\r\n            } else {\r\n                value = 1 + ((value-0.5) / 0.5) * (MAX_EASE_POWER - 1)\r\n            }\r\n\r\n            this.computedValue = value;\r\n        }\r\n    },\r\n    pointsPerCircle: {\r\n        group: \"pointsPerCircle\",\r\n        type: \"number\",\r\n        initial: 20,\r\n        min: 4,\r\n        step: 1,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(v, this.min);\r\n        }\r\n    },\r\n    adaptativePointsPerCircle: {\r\n        group: \"pointsPerCircle\",\r\n        label: \"adaptative\",\r\n        type: \"select\",\r\n        listOfValues: [\r\n            {value: true, text: \"true\"},\r\n            {value: false, text: \"false\", selected: true},\r\n        ],\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let value;\r\n\r\n            try {\r\n                value = JSON.parse(v);\r\n            } catch {\r\n                value = v;\r\n            }\r\n\r\n            this.computedValue = this.inputValue = value;\r\n        }\r\n    },\r\n    smoothness: {\r\n        type: \"range\",\r\n        initial: 0,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.001,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    randomizePointsInterval: {\r\n        group: \"randomizePointsInterval\",\r\n        type: \"select\",\r\n        listOfValues: [\r\n            {value: true, text: \"true\"},\r\n            {value: false, text: \"false\", selected: true},\r\n        ],\r\n        disableInputsForValue: {\r\n            \"false\": \"*\"\r\n            \r\n        },\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let value;\r\n\r\n            try {\r\n                value = JSON.parse(v);\r\n            } catch {\r\n                value = v;\r\n            }\r\n\r\n            this.computedValue = this.inputValue = value;\r\n        }\r\n    },\r\n    pointsIntervalRandomizationFactor: {\r\n        group: \"randomizePointsInterval\",\r\n        type: \"range\",\r\n        label: \"randomizationFactor\",\r\n        initial: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.001,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    pointsIntervalRandomizationSeed: {\r\n        group: \"randomizePointsInterval\",\r\n        type: \"button\",\r\n        text: \"seed\",\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = v;\r\n        },\r\n        onClick: function () {\r\n     \r\n            requestAnimationFrame(() => {\r\n                draw(params, {pointsInterval: true});\r\n            });\r\n        }\r\n    },\r\n    linkPointsIntervalRandomizationFactorToEase: {\r\n        group: \"randomizePointsInterval\",\r\n        type: \"select\",\r\n        label: \"linkToEase\",\r\n        listOfValues: [\r\n            {value: true, text: \"true\"},\r\n            {value: false, text: \"false\", selected: true},\r\n        ],\r\n        disableInputsForValue: {\r\n            \"false\": [\r\n                \"pointsIntervalRandomizationEase\",\r\n                \"pointsIntervalRandomizationMinFactor\",\r\n                \"pointsIntervalRandomizationMaxFactor\"\r\n            ]\r\n            \r\n        },\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let value;\r\n\r\n            try {\r\n                value = JSON.parse(v);\r\n            } catch {\r\n                value = v;\r\n            }\r\n\r\n            this.computedValue = this.inputValue = value;\r\n        }\r\n    },\r\n    pointsIntervalRandomizationEase: {\r\n        group: \"randomizePointsInterval\",\r\n        label: \"ease\",\r\n        type: \"range\",\r\n        initial: 0.5,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.001,\r\n        stepValues: [0.5],\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let value = Math.max(Math.min(v, this.max), this.min);\r\n            this.inputValue = value;\r\n\r\n            if (value < 0.5) {\r\n                value = (1 + ((0.5 - value) / 0.5) * (MAX_EASE_POWER - 1)) * -1;\r\n            } else {\r\n                value = 1 + ((value-0.5) / 0.5) * (MAX_EASE_POWER - 1)\r\n            }\r\n\r\n            this.computedValue = value;\r\n        }\r\n    },\r\n    pointsIntervalRandomizationMinFactor: {\r\n        group: \"randomizePointsInterval\",\r\n        type: \"range\",\r\n        label: \"from\",\r\n        initial: 0,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.001,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    pointsIntervalRandomizationMaxFactor: {\r\n        group: \"randomizePointsInterval\",\r\n        type: \"range\",\r\n        label: \"to\",\r\n        initial: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.001,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    randomizePointsHeight: {\r\n        group: \"randomizePointsHeight\",\r\n        type: \"select\",\r\n        listOfValues: [\r\n            {value: true, text: \"true\"},\r\n            {value: false, text: \"false\", selected: true},\r\n        ],\r\n        disableInputsForValue: {\r\n            \"false\": \"*\"\r\n        },\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let value;\r\n\r\n            try {\r\n                value = JSON.parse(v);\r\n            } catch {\r\n                value = v;\r\n            }\r\n\r\n            this.computedValue = this.inputValue = value;\r\n        }\r\n    },\r\n    pointsHeightRandomizationFactor: {\r\n        group: \"randomizePointsHeight\",\r\n        type: \"range\",\r\n        label: \"randomizationFactor\",\r\n        initial: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.001,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    pointsHeightRandomizationSeed: {\r\n        group: \"randomizePointsHeight\",\r\n        type: \"button\",\r\n        text: \"seed\",\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = v;\r\n        },\r\n        onClick: function () {\r\n     \r\n            requestAnimationFrame(() => {\r\n                draw(params, {pointsHeight: true});\r\n            });\r\n        }\r\n    },\r\n    linkPointsHeightRandomizationFactorToEase: {\r\n        group: \"randomizePointsHeight\",\r\n        type: \"select\",\r\n        label: \"linkToEase\",\r\n        listOfValues: [\r\n            {value: true, text: \"true\"},\r\n            {value: false, text: \"false\", selected: true},\r\n        ],\r\n        disableInputsForValue: {\r\n            \"false\": [\r\n                \"pointsHeightRandomizationEase\",\r\n                \"pointsHeightRandomizationMinFactor\",\r\n                \"pointsHeightRandomizationMaxFactor\"\r\n            ]\r\n            \r\n        },\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let value;\r\n\r\n            try {\r\n                value = JSON.parse(v);\r\n            } catch {\r\n                value = v;\r\n            }\r\n\r\n            this.computedValue = this.inputValue = value;\r\n        }\r\n    },\r\n    pointsHeightRandomizationEase: {\r\n        group: \"randomizePointsHeight\",\r\n        label: \"ease\",\r\n        type: \"range\",\r\n        initial: 0.5,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.001,\r\n        stepValues: [0.5],\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let value = Math.max(Math.min(v, this.max), this.min);\r\n            this.inputValue = value;\r\n\r\n            if (value < 0.5) {\r\n                value = (1 + ((0.5 - value) / 0.5) * (MAX_EASE_POWER - 1)) * -1;\r\n            } else {\r\n                value = 1 + ((value-0.5) / 0.5) * (MAX_EASE_POWER - 1)\r\n            }\r\n\r\n            this.computedValue = value;\r\n        }\r\n    },\r\n    pointsHeightRandomizationMinFactor: {\r\n        group: \"randomizePointsHeight\",\r\n        type: \"range\",\r\n        label: \"from\",\r\n        initial: 0,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.001,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    pointsHeightRandomizationMaxFactor: {\r\n        group: \"randomizePointsHeight\",\r\n        type: \"range\",\r\n        label: \"to\",\r\n        initial: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.001,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    circlesRotationVariationType: {\r\n        group: \"circlesRotationVariation\",\r\n        label: \"type\",\r\n        type: \"select\",\r\n        listOfValues: [\r\n            {value: false, text: \"none\", selected: true},\r\n            {value: \"randomization\", text: \"randomization\"},\r\n            {value: \"progression\", text: \"progression\"},\r\n        ],\r\n        disableInputsForValue: {\r\n            \"false\": \"*\",\r\n            \"progression\": [\r\n                \"circlesRotationRandomizationSeed\"\r\n            ]\r\n        },\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let value;\r\n\r\n            try {\r\n                value = JSON.parse(v);\r\n            } catch {\r\n                value = v;\r\n            }\r\n\r\n            this.computedValue = this.inputValue = value;\r\n\r\n            if (value) {\r\n                requestAnimationFrame(() => {\r\n                    draw(params, {circlesRotation: true});\r\n                });\r\n            }\r\n        }\r\n    },\r\n    circlesRotationVariationFactor: {\r\n        group: \"circlesRotationVariation\",\r\n        type: \"range\",\r\n        label: \"variationFactor\",\r\n        initial: 0.5,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.001,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    circlesRotationRandomizationSeed: {\r\n        group: \"circlesRotationVariation\",\r\n        type: \"button\",\r\n        text: \"seed\",\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = v;\r\n        },\r\n        onClick: function () {\r\n     \r\n            requestAnimationFrame(() => {\r\n                draw(params, {circlesRotation: true});\r\n            });\r\n        }\r\n    },\r\n    strokeWidth: {\r\n        group: \"strokeWidth\",\r\n        type: \"number\",\r\n        initial: 2,\r\n        max: 100,\r\n        min: 0,\r\n        step: 0.001,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            let value = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n            this.computedValue = (params.resolution.value * value) / 2048;\r\n        }\r\n    },\r\n    linkStrokeWidthToEase: {\r\n        group: \"strokeWidth\",\r\n        type: \"select\",\r\n        label: \"linkToEase\",\r\n        listOfValues: [\r\n            {value: true, text: \"true\"},\r\n            {value: false, text: \"false\", selected: true},\r\n        ],\r\n        disableInputsForValue: {\r\n            \"false\": [\r\n                \"strokeWidthEase\",\r\n                \"strokeWidthMinFactor\",\r\n                \"strokeWidthMaxFactor\"\r\n            ]\r\n            \r\n        },\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let value;\r\n\r\n            try {\r\n                value = JSON.parse(v);\r\n            } catch {\r\n                value = v;\r\n            }\r\n\r\n            this.computedValue = this.inputValue = value;\r\n        }\r\n    },\r\n    strokeWidthEase: {\r\n        group: \"strokeWidth\",\r\n        label: \"ease\",\r\n        type: \"range\",\r\n        initial: 0.5,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.001,\r\n        stepValues: [0.5],\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let value = Math.max(Math.min(v, this.max), this.min);\r\n            this.inputValue = value;\r\n\r\n            if (value < 0.5) {\r\n                value = (1 + ((0.5 - value) / 0.5) * (MAX_EASE_POWER - 1)) * -1;\r\n            } else {\r\n                value = 1 + ((value-0.5) / 0.5) * (MAX_EASE_POWER - 1)\r\n            }\r\n\r\n            this.computedValue = value;\r\n        }\r\n    },\r\n    strokeWidthMinFactor: {\r\n        group: \"strokeWidth\",\r\n        type: \"range\",\r\n        label: \"from\",\r\n        initial: 0,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.001,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    strokeWidthMaxFactor: {\r\n        group: \"strokeWidth\",\r\n        type: \"range\",\r\n        label: \"to\",\r\n        initial: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.001,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    clipCircles: {\r\n        type: \"select\",\r\n        label: \"type\",\r\n        listOfValues: [\r\n            {value: \"in\", text: \"in\"},\r\n            {value: \"out\", text: \"out\"},\r\n            {value: false, text: \"none\", selected: true},\r\n        ],\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let value;\r\n\r\n            try {\r\n                value = JSON.parse(v);\r\n            } catch {\r\n                value = v;\r\n            }\r\n\r\n            this.computedValue = this.inputValue = value;\r\n        }\r\n    },\r\n    alphaBackground: {\r\n        type: \"select\",\r\n        listOfValues: [\r\n            {value: true, text: \"true\"},\r\n            {value: false, text: \"false\", selected: true},\r\n        ],\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let value;\r\n\r\n            try {\r\n                value = JSON.parse(v);\r\n            } catch {\r\n                value = v;\r\n            }\r\n\r\n            this.computedValue = this.inputValue = value;\r\n        }\r\n    },\r\n    downloadImage: {\r\n        group: \"downloadImage\",\r\n        type: \"button\",\r\n        text: \"download\",\r\n        onClick: function () {\r\n            _.canvas.toBlob(blob => {\r\n\r\n                let a = document.createElement('a');\r\n                a.href = URL.createObjectURL(blob);\r\n                a.setAttribute('download', '');\r\n                a.click();\r\n                URL.revokeObjectURL(a.href);\r\n\r\n            }, \"image/png\")\r\n        }\r\n    }\r\n};\r\n\r\nexport { params };","const camelCaseToSpan = function (str) {\r\n    \r\n    let uppers = [0], span = \"\";\r\n\r\n    Array.from(str).forEach((char, i) => {\r\n        if (char.toUpperCase() === char) uppers.push(i);\r\n    });\r\n\r\n    uppers.forEach((upIndex, i) => {\r\n        span += \"<span>\" + str.slice(upIndex, uppers[i + 1]) + \"</span>\";\r\n    })\r\n\r\n    return span;\r\n\r\n};\r\n\r\nexport { camelCaseToSpan };","import { _ } from \"./global_var\";\r\nimport { camelCaseToSpan } from \"./utils\";\r\nimport { params } from \"./parameters\";\r\nimport { draw } from \"./draw\";\r\n\r\nlet currentKey = null;\r\nlet fired = false;\r\n\r\ndocument.addEventListener('keydown', (e) => {\r\n\r\n    if (!fired) {\r\n        currentKey = e.key;\r\n        fired = true;\r\n    }\r\n    \r\n});\r\n\r\ndocument.addEventListener('keyup', () => {\r\n    currentKey = null;\r\n    fired = false;\r\n});\r\n\r\nconst disableInputsAccordingToSelectedValues = function (params, inputParamName) {\r\n\r\n    const inputParam = params[inputParamName];\r\n    const groupName = inputParam.group;\r\n\r\n    if (inputParam.hasOwnProperty('group')) {\r\n\r\n        const selects = document.querySelectorAll('.' + groupName + \" select\");\r\n        const finalInputsState = {};\r\n\r\n        selects.forEach(select => {\r\n\r\n            const param = params[select.getAttribute(\"data-var\")];\r\n\r\n            if (param.hasOwnProperty('disableInputsForValue')) {\r\n\r\n                const value = param.value.toString();\r\n\r\n                document.querySelectorAll(\".\" + groupName + \" [data-var]:not([data-var='\" + param.paramName + \"'])\").forEach(input => {\r\n\r\n                    let name = input.getAttribute(\"data-var\");\r\n                    let newState = true;\r\n\r\n                    if (param.disableInputsForValue.hasOwnProperty(value) && (param.disableInputsForValue[value].includes(name) || param.disableInputsForValue[value] === \"*\")) {\r\n                        newState = false;\r\n                    }\r\n                        \r\n                    finalInputsState[name] = finalInputsState.hasOwnProperty(name) ? finalInputsState[name] && newState : newState;\r\n\r\n                });\r\n                \r\n            }\r\n            \r\n        });\r\n\r\n        for (let name in finalInputsState) {\r\n\r\n            const input = document.querySelector(\"[data-var='\" + name + \"']\");\r\n\r\n            input.disabled = !finalInputsState[name];\r\n        \r\n            if (!input.parentElement.classList.contains(groupName)) {\r\n\r\n                const label = input.parentElement.querySelector('legend');\r\n                \r\n                if (label) {\r\n                    finalInputsState[name] ? label.classList.remove('disabled') : label.classList.add('disabled');\r\n                }\r\n\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n}\r\n\r\nconst inputHandler = function (e) {\r\n\r\n    const target = e.target;\r\n    let paramName = target.getAttribute(\"data-var\");\r\n    let param = params[paramName];\r\n    let newValue = target.value;\r\n\r\n    if (target.type === \"range\" && param.hasOwnProperty('stepValues') && currentKey !== \"Control\") {\r\n\r\n        let value = (newValue + Math.abs(target.min)) * 10 / (target.max + Math.abs(target.min));\r\n        \r\n        let found = false;\r\n        let i = 0;\r\n\r\n        while (i < param.stepValues.length && !found) {\r\n\r\n            let stepValue = (param.stepValues[i] + Math.abs(target.min)) * 10 / (target.max + Math.abs(target.min));\r\n\r\n            if (value > stepValue - 0.022 && value < stepValue + 0.022) {\r\n                param.value = target.value = param.stepValues[i];\r\n                found = true;\r\n            }\r\n\r\n            i++;\r\n\r\n        }\r\n\r\n        if(!found) param.value = newValue;\r\n\r\n    } else {\r\n        param.value = newValue;\r\n    }\r\n\r\n    disableInputsAccordingToSelectedValues(params, paramName);\r\n\r\n    let seedParam;\r\n\r\n    if (paramName === \"pointsPerCircle\"\r\n        || paramName === \"adaptativePointsPerCircle\"\r\n        || ((paramName === \"circleSpacingEase\" || paramName === \"smallestCircleScale\") && params.adaptativePointsPerCircle.value))\r\n    {\r\n        seedParam = { pointsInterval: true, pointsHeight: true };\r\n    } else if (paramName === \"iterations\") {\r\n        seedParam = { pointsInterval: true, pointsHeight: true, circlesRotation: true };\r\n    }\r\n\r\n    requestAnimationFrame(() => {\r\n        draw(params, seedParam);\r\n    });\r\n};\r\n\r\nconst generateUI = function (params) {\r\n    for (let param in params) {\r\n\r\n        let current = params[param];\r\n\r\n        current.paramName = param;\r\n    \r\n        if (current.hasOwnProperty('initial')) current.value = current.initial;\r\n    \r\n        let fieldset, elt;\r\n    \r\n        if (current.hasOwnProperty('group')) {\r\n            \r\n            let group = document.querySelector(\".\" + current.group);\r\n    \r\n            if (group) fieldset = group;\r\n            else {\r\n    \r\n                fieldset = document.createElement('fieldset');\r\n                fieldset.classList.add(current.group);\r\n                let legend = document.createElement('legend');\r\n                legend.innerHTML = camelCaseToSpan(current.group);\r\n                fieldset.append(legend);\r\n    \r\n            }\r\n        } else {\r\n            fieldset = document.createElement('fieldset');\r\n            let legend = document.createElement('legend');\r\n            legend.innerHTML = camelCaseToSpan(param);\r\n            fieldset.append(legend);\r\n        }\r\n    \r\n        if (current.type === \"button\") {\r\n    \r\n            elt = document.createElement('button');\r\n            elt.innerHTML = current.text;\r\n            elt.addEventListener('click', current.onClick);\r\n            elt.setAttribute('data-var', param);\r\n            \r\n        } else if (current.type === \"select\") {\r\n    \r\n            elt = document.createElement(\"select\");\r\n    \r\n            current.listOfValues.forEach(value => {\r\n                elt.innerHTML += `<option ${value.hasOwnProperty(\"selected\") && value.selected ? \"selected\" : \"\"} value=\"${value.value}\">${value.text}</option>`\r\n            });\r\n    \r\n            elt.addEventListener('input', inputHandler);\r\n            elt.setAttribute('data-var', param);\r\n    \r\n        } else {\r\n    \r\n            elt = document.createElement(\"input\");\r\n    \r\n            elt.type = current.type;\r\n\r\n            if (current.hasOwnProperty('step')) elt.step = current.step;\r\n    \r\n            if (current.hasOwnProperty('min')) elt.min = current.min;\r\n            if (current.hasOwnProperty('max')) elt.max = current.max;\r\n    \r\n            elt.value = current.inputValue;\r\n    \r\n            elt.addEventListener('input', inputHandler);\r\n            elt.setAttribute('data-var', param);\r\n\r\n            let container = document.createElement('div');\r\n            container.classList.add('input-container');\r\n\r\n            if (elt.type === \"range\") container.classList.add('range');\r\n            else if (elt.type === \"number\") container.classList.add('number');\r\n\r\n            container.append(elt);\r\n            elt = container;\r\n        }\r\n\r\n        if (current.hasOwnProperty(\"label\")) {\r\n            let fieldsetLabel = document.createElement(\"fieldset\");\r\n            let label = document.createElement('legend');\r\n            label.innerHTML = camelCaseToSpan(current.label);\r\n            fieldsetLabel.append(label);\r\n            fieldsetLabel.append(elt);\r\n            elt = fieldsetLabel;\r\n        }\r\n    \r\n        fieldset.append(elt);\r\n        _.paramsWindow.append(fieldset);\r\n\r\n    }\r\n\r\n    for (let param in params) {\r\n\r\n        disableInputsAccordingToSelectedValues(params, param);\r\n\r\n    }\r\n};\r\n\r\nexport { generateUI };","import { params } from \"./modules/parameters\";\r\nimport { generateUI } from \"./modules/generate_ui\";\r\nimport { draw } from \"./modules/draw\";\r\n\r\n\r\nlet input = document.createElement('input');\r\ninput.type = \"number\";\r\ninput.style.fontSize = \"1.9vh\";\r\ndocument.documentElement.append(input);\r\nconst numberInputHeight = input.offsetHeight;\r\ninput.remove();\r\n\r\ndocument.body.style.setProperty('--number-input-height', numberInputHeight + \"px\");\r\n\r\ninput.type = \"range\";\r\ninput.style.removeProperty('font-size');\r\ndocument.documentElement.append(input);\r\nconst rangeInputHeight = input.offsetHeight;\r\ninput.remove();\r\n\r\ndocument.body.style.setProperty('--range-input-height', rangeInputHeight + \"px\");\r\n\r\ngenerateUI(params);\r\n\r\nrequestAnimationFrame(() => {\r\n    draw(params);\r\n});\r\n\r\n"],"names":["$ba34ad0cc1ecfea6$var$canvas","document","querySelector","$ba34ad0cc1ecfea6$var$ctx","getContext","$ba34ad0cc1ecfea6$export$71511d61b312f219","canvas","ctx","paramsWindow","getElementById","$58c2b6c9d3a00a13$export$6c4a311cc157c764","p1","p2","Math","sqrt","pow","x","y","$58c2b6c9d3a00a13$export$9e04c6c993e22ccd","i","power","step","min","max","ease","round","$58c2b6c9d3a00a13$export$36b2348463b95166","pRef1","pRef2","pTarget","offset","useYasInput","na","a","b","$58c2b6c9d3a00a13$export$7e3e5a9ff6d02ede","pBefore","pCurrent","pAfter","distFromCurrentFactor","params","smoothness","initial","dirBefore","dirAfter","beforeToCurrentMid","currentToAfterMid","newCurrent","beforeToCurrentDist","currentToAfterDist","DXgreaterThanDYBefore","DXgreaterThanDYAfter","$ea6065299f17f9f2$export$e529deb2bfd496dc","generateNewSeed","pointsInterval","pointsHeight","circlesRotation","clearRect","resolution","value","alphaBackground","fillStyle","fillRect","width","height","circlesRadius","number","iterations","radius","push","circleSpacingEase","smallestCircleScale","biggestCircleScale","$58c2b6c9d3a00a13$export$a0802d0d56310d0a","pointsPerCircle","circleRadius","arr","maxPointsPerCircle","length","adaptativePointsPerCircle","floor","$58c2b6c9d3a00a13$export$a990042fb368a533","randomizePointsInterval","pointsIntervalRandomizationSeed","Array","apply","map","random","randomizePointsHeight","pointsHeightRandomizationSeed","circlesRotationVariationType","circlesRotationRandomizationSeed","forEach","i1","lineWidth","strokeWidth","strokeWidthEase","strokeWidthMinFactor","strokeWidthMaxFactor","linkStrokeWidthToEase","points","pointsNumber","randomPointsInterval","randomPointsHeight","randomCirclesRotation","currentCircleIteration","pointStep","circleStep","originFromCenter","distanceFromCenter","originX","cos","originRotate","PI","originY","sin","pointsWithCp","linkPointsIntervalRandomizationFactorToEaseFactor","linkPointsHeightRandomizationFactorToEaseFactor","rotationVariation","linkPointsIntervalRandomizationFactorToEase","pointsIntervalRandomizationEase","pointsIntervalRandomizationMinFactor","pointsIntervalRandomizationMaxFactor","linkPointsHeightRandomizationFactorToEase","pointsHeightRandomizationEase","pointsHeightRandomizationMinFactor","pointsHeightRandomizationMaxFactor","rotateOffset","pointsIntervalRandomizationFactor","circlesRotationVariationFactor","distOffset","pointsHeightRandomizationFactor","angle","point","pointBefore","pointAfter","$58c2b6c9d3a00a13$export$af0496c55bf31eb","beginPath","moveTo","lineTo","cpStart","cpr","cpEnd","cpl","bezierCurveTo","closePath","stroke","$edfdaed3b9f3fa0f$export$281ad3752a540efe","$edfdaed3b9f3fa0f$var$forceRecompute","paramName","param","inputValue","group","label","type","window","innerHeight","this","computedValue","v","stepValues","listOfValues","text","selected","JSON","parse","disableInputsForValue","false","onClick","requestAnimationFrame","progression","clipCircles","downloadImage","toBlob","blob","createElement","href","URL","createObjectURL","setAttribute","click","revokeObjectURL","$c96f57613fceb58f$export$465e181847366fda","str","uppers","span","from","char","toUpperCase","upIndex","slice","$36768e1cc8fcd734$var$currentKey","$36768e1cc8fcd734$var$fired","addEventListener","e","key","$36768e1cc8fcd734$var$disableInputsAccordingToSelectedValues","inputParamName","inputParam","groupName","hasOwnProperty","selects","querySelectorAll","finalInputsState","select","getAttribute","toString","input","name","newState","includes","name1","disabled","parentElement","classList","contains","remove","add","$36768e1cc8fcd734$var$inputHandler","target","seedParam","newValue","abs","found","stepValue","$06e535a9183db766$var$input","style","fontSize","documentElement","append","$06e535a9183db766$var$numberInputHeight","offsetHeight","body","setProperty","removeProperty","$06e535a9183db766$var$rangeInputHeight","fieldset","elt","current","legend","innerHTML","container","fieldsetLabel","param1","$36768e1cc8fcd734$export$cddef0e4b5e6ec4c"],"version":3,"file":"index.e8378d63.js.map"}