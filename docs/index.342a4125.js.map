{"mappings":"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","sources":["src/script/modules/global_var.js","src/script/modules/geometry_functions.js","src/script/modules/draw.js","src/script/modules/parameters.js","src/script/modules/utils.js","src/script/modules/generate_ui.js","src/script/index.js"],"sourcesContent":["const canvas = document.querySelector('canvas');\r\nconst ctx = canvas.getContext('2d');\r\n\r\nconst _ = {\r\n    canvas : canvas,\r\n    ctx: ctx,\r\n    paramsWindow: document.getElementById('params')\r\n}\r\n\r\nexport { _ };","import { _ } from \"./global_var\";\r\n\r\nconst dist = function (p1, p2) {\r\n    return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2))\r\n}\r\n\r\nconst offsetPointOnAxis = function (pRef1, pRef2, pTarget, circleOrigin, offset = 0, dir = \"right\") {\r\n    \r\n    let na = pRef1.x > pRef2.x ? pRef1.x - pRef2.x : pRef2.x - pRef1.x;\r\n    na = na === 0 ? 1 : na;\r\n    let c = pRef1.x > pRef2.x ? pRef1.y - pRef2.y : pRef2.y - pRef1.y;\r\n    let a = c / na;\r\n    let b = pRef1.y - a * pRef1.x;\r\n\r\n    let x, y;\r\n\r\n    let DXgreaterThanDY = Math.max(pRef1.x, pRef2.x) - Math.min(pRef1.x, pRef2.x) > Math.max(pRef1.y, pRef2.y) - Math.min(pRef1.y, pRef2.y);\r\n\r\n    if (DXgreaterThanDY) {\r\n\r\n        if (pTarget.y > circleOrigin.y) {\r\n            dir = dir === \"right\" ? -1 : (dir === \"left\" ? 1 : 0);\r\n        } else {\r\n            dir = dir === \"right\" ? 1 : (dir === \"left\" ? -1 : 0);\r\n        }\r\n\r\n        x = pTarget.x + dir * offset;\r\n        y = a * x + b\r\n\r\n    } else {\r\n\r\n        if (pTarget.x > circleOrigin.x) {\r\n            dir = dir === \"right\" ? 1 : (dir === \"left\" ? -1 : 0);\r\n        } else {\r\n            dir = dir === \"right\" ? -1 : (dir === \"left\" ? 1 : 0);\r\n        }\r\n\r\n        y = pTarget.y + dir * offset;\r\n        x = (y - b) / a\r\n    }\r\n\r\n    return { x: x, y: y };\r\n\r\n}\r\n\r\nconst getControlPoints = function (pBefore, pCurrent, pAfter, circleOrigin, distFromCurrentFactor = params.smoothness.initial) {\r\n\r\n    distFromCurrentFactor = Math.max(0, Math.min(distFromCurrentFactor, 1));\r\n\r\n    let beforeToCurrentMid = { x: (pBefore.x + pCurrent.x) / 2, y: (pBefore.y + pCurrent.y) / 2 };\r\n\r\n    let currentToAfterMid = { x: (pCurrent.x + pAfter.x) / 2, y: (pCurrent.y + pAfter.y) / 2 };\r\n\r\n    let newCurrent = { x: (beforeToCurrentMid.x + currentToAfterMid.x) / 2, y: (beforeToCurrentMid.y + currentToAfterMid.y) / 2 };\r\n    \r\n    let beforeToCurrentDist = dist(beforeToCurrentMid, newCurrent);\r\n    let currentToAfterDist = dist(newCurrent, currentToAfterMid);\r\n\r\n    let cpl = offsetPointOnAxis(beforeToCurrentMid, currentToAfterMid, newCurrent, circleOrigin, beforeToCurrentDist * 0.552 * distFromCurrentFactor, \"left\");\r\n\r\n    let cpr = offsetPointOnAxis(beforeToCurrentMid, currentToAfterMid, newCurrent, circleOrigin, currentToAfterDist * 0.552 * distFromCurrentFactor, \"right\");\r\n\r\n    return { cpl, cpr, x: newCurrent.x , y: newCurrent.y };\r\n\r\n}\r\n\r\nconst getPoints = function (rayon, pointsNumber, randomPointsInterval, circlesRotationVariation, params) {\r\n\r\n    let step = 360 / pointsNumber;\r\n\r\n    let originFromCenter = (params.biggestCircleScale.value / 2 - rayon) * params.distanceFromCenter.value;\r\n    let originX = _.canvas.width / 2 + (originFromCenter * Math.cos(params.originRotate.value * Math.PI / 180));\r\n    let originY = _.canvas.height / 2 + (originFromCenter * Math.sin(params.originRotate.value * Math.PI / 180));\r\n\r\n    let points = [], pointsWithCp = [];\r\n\r\n    for (let i = 0; i < pointsNumber; i++){\r\n\r\n        let offset = (params.randomizePointsInterval.value ? step * (randomPointsInterval ? randomPointsInterval[i] : 0) * params.pointsIntervalRandomizationFactor.value : 0) + (params.circlesRotationVariationType.value ? (params.circlesRotationVariationType.value === \"randomization\" ? step : 360) * (circlesRotationVariation ? circlesRotationVariation : 0) * params.circlesRotationVariationFactor.value : 0);\r\n\r\n        let x = originX + rayon * Math.cos((i * step + offset) * Math.PI / 180);\r\n        let y = originY + rayon * Math.sin((i * step + offset) * Math.PI / 180);\r\n\r\n        points.push({ x: x, y: y });\r\n        \r\n    }\r\n\r\n    points.forEach((point, i) => {\r\n        \r\n        let pointBefore = i > 0 ? points[i - 1] : points[points.length - 1];\r\n\r\n        let pointAfter = i < points.length - 1 ? points[i + 1] : points[0];\r\n\r\n        pointsWithCp.push(getControlPoints(pointBefore, point, pointAfter, {x: originX, y: originY}, params.smoothness.value));\r\n    });\r\n\r\n    return pointsWithCp;\r\n}\r\n\r\nconst getCirclesRadius = function (params) {\r\n\r\n    let number = params.iterations.value;\r\n\r\n    let step = 1 / Math.max((number - 1), 1);\r\n\r\n    let radius = [];\r\n\r\n    for (let i = 0; i < number; i++){\r\n\r\n        let ease;\r\n\r\n        if (params.tension.value < 0) {\r\n            ease = 1 - Math.pow(1 - (i * step), params.tension.value * -1)\r\n        } else {\r\n            ease = Math.pow(i * step, params.tension.value);\r\n        }\r\n\r\n        radius.push(Math.round((params.smallestCircleScale.value + (ease * (params.biggestCircleScale.value - params.smallestCircleScale.value))) * 1000) / 2000);\r\n    }\r\n\r\n    return radius;\r\n}\r\n\r\nconst getPointsNumber = function (params) {\r\n\r\n    let arr = []\r\n\r\n    for (let i = 0; i < params.iterations.value; i++){\r\n        arr.push(params.pointsPerCircle.value);\r\n    }\r\n\r\n    return arr;\r\n}\r\n\r\nexport { dist, offsetPointOnAxis, getControlPoints, getPoints, getCirclesRadius, getPointsNumber };","import { _ } from \"./global_var\";\r\nimport { getCirclesRadius, getPointsNumber, getPoints } from \"./geometry_functions\";\r\n\r\nconst draw = function (params, generateNewSeed = { pointsInterval: false, pointsHeight: false, circlesRotation: false }) {\r\n\r\n    _.ctx.clearRect(0, 0, params.resolution.value, params.resolution.value);\r\n\r\n    _.ctx.lineWidth = params.strokeWidth.value;\r\n\r\n    if (!params.alphaBackground.value) {\r\n        _.ctx.fillStyle = \"white\";\r\n        _.ctx.fillRect(0, 0, _.canvas.width, _.canvas.height);\r\n    }\r\n\r\n    const pointsPerCircle = getPointsNumber(params);\r\n\r\n    const circlesRadius = getCirclesRadius(params, pointsPerCircle);\r\n\r\n    let newRandomPointsInterval = params.randomizePointsInterval.value && (generateNewSeed.pointsInterval || !params.pointsIntervalRandomizationSeed.value);\r\n\r\n    if (newRandomPointsInterval) {\r\n        \r\n        let arr = [];\r\n\r\n        for (let i = 0; i < params.iterations.value; i++) {\r\n            arr.push(Array.apply(null, Array(pointsPerCircle[i])).map(() => -0.5 + Math.random()))\r\n        }\r\n\r\n        params.pointsIntervalRandomizationSeed.value = arr;\r\n    }\r\n\r\n    let newCirclesRotation = params.circlesRotationVariationType.value && (generateNewSeed.circlesRotation || !params.circlesRotationVariationSeed.value);\r\n\r\n    if (newCirclesRotation) {\r\n\r\n        let arr = [];\r\n\r\n        if (params.circlesRotationVariationType.value === \"randomization\") {\r\n            \r\n            for (let i = 0; i < params.iterations.value; i++) {\r\n                arr.push(Math.random());\r\n            }\r\n\r\n        } else if (params.circlesRotationVariationType.value === \"progression\") {\r\n\r\n            for (let i = 0; i < params.iterations.value; i++) {\r\n                arr.push(Math.round(i / (params.iterations.value - 1) * 1000) / 1000);\r\n            }\r\n\r\n        }\r\n\r\n        params.circlesRotationVariationSeed.value = arr;\r\n\r\n    }\r\n\r\n    circlesRadius.forEach((circleRadius, i) => {\r\n\r\n        let randomPointsInterval = params.pointsIntervalRandomizationSeed.value;\r\n\r\n        if (Array.isArray(randomPointsInterval)) randomPointsInterval = randomPointsInterval[i];\r\n\r\n        let circlesRotationVariation = params.circlesRotationVariationSeed.value;\r\n\r\n        if (Array.isArray(circlesRotationVariation)) circlesRotationVariation = circlesRotationVariation[i];\r\n\r\n        let points = getPoints(circleRadius, pointsPerCircle[i], randomPointsInterval, circlesRotationVariation, params);\r\n\r\n        _.ctx.beginPath();\r\n        \r\n        points.forEach((point, i) => {\r\n\r\n            if (i === 0) _.ctx.moveTo(point.x, point.y);\r\n\r\n            if (params.smoothness.value === 0) {\r\n                \r\n                _.ctx.lineTo(point.x, point.y);\r\n                \r\n            } else if (i > 0) {\r\n\r\n                let cpStart = points[i - 1].cpr;\r\n                let cpEnd = point.cpl;\r\n\r\n                _.ctx.bezierCurveTo(cpStart.x, cpStart.y, cpEnd.x, cpEnd.y, point.x, point.y);\r\n            }\r\n        });\r\n\r\n        if (params.smoothness.value > 0) {\r\n            _.ctx.bezierCurveTo(points[points.length - 1].cpr.x, points[points.length - 1].cpr.y, points[0].cpl.x, points[0].cpl.y, points[0].x, points[0].y);\r\n        } else {\r\n            _.ctx.closePath();\r\n        }\r\n        _.ctx.stroke();\r\n\r\n        /*points.forEach((point, i) => {\r\n\r\n            _.ctx.beginPath();\r\n            _.ctx.fillStyle = \"green\"\r\n            _.ctx.arc(point.x, point.y, 2, 0, 180);\r\n            _.ctx.fill();\r\n\r\n            _.ctx.beginPath();\r\n            _.ctx.fillStyle = \"blue\"\r\n            _.ctx.arc(point.cpl.x, point.cpl.y, 2, 0, 180);\r\n            _.ctx.fill();\r\n\r\n            _.ctx.beginPath();\r\n            _.ctx.fillStyle = \"blue\"\r\n            _.ctx.arc(point.cpr.x, point.cpr.y, 2, 0, 180);\r\n            _.ctx.fill();\r\n            \r\n            _.ctx.beginPath();\r\n            _.ctx.moveTo(point.cpl.x, point.cpl.y);\r\n            _.ctx.lineTo(point.cpr.x, point.cpr.y);\r\n            _.ctx.stroke()\r\n        })*/\r\n    })\r\n    \r\n};\r\n\r\nexport { draw };","import { _ } from \"./global_var\";\r\nimport { draw } from \"./draw\";\r\n\r\nlet params;\r\n\r\nconst forceRecompute = function (paramName) {\r\n\r\n    let param = params[paramName];\r\n\r\n    if (param.inputValue) param.value = param.inputValue;\r\n\r\n}\r\n\r\nparams = {\r\n    resolution: {\r\n        group: \"downloadImage\",\r\n        label: \"resolution\",\r\n        type: \"number\",\r\n        initial: window.innerHeight,\r\n        min: 1,\r\n        max: 6000,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            let value = Math.max(Math.min(v, this.max), this.min);\r\n            this.computedValue = this.inputValue = _.canvas.width = _.canvas.height = value;\r\n\r\n            forceRecompute(\"biggestCircleScale\");\r\n            forceRecompute(\"strokeWidth\");\r\n        }\r\n    },\r\n    biggestCircleScale: {\r\n        type: \"range\",\r\n        initial: 0.9,\r\n        min: 0,\r\n        max: 2,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            let value = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n            this.computedValue = value * params.resolution.value;\r\n\r\n            forceRecompute(\"smallestCircleScale\");\r\n        }\r\n    },\r\n    smallestCircleScale: {\r\n        type: \"range\",\r\n        initial: 0.4,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            let value = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n            this.computedValue = value * params.biggestCircleScale.value;\r\n        }\r\n    },\r\n    originRotate: {\r\n        group: \"origin\",\r\n        type: \"range\",\r\n        label: \"rotate\",\r\n        initial: 60,\r\n        min: 0,\r\n        max: 360,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    distanceFromCenter: {\r\n        group: \"origin\",\r\n        type: \"range\",\r\n        label: \"distanceFromCenter\",\r\n        initial: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    iterations: {\r\n        type: \"range\",\r\n        initial: 25,\r\n        min: 1,\r\n        max: 200,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    tension: {\r\n        type: \"range\",\r\n        initial: 0.5,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let maxTension = 5;\r\n\r\n            let value = Math.max(Math.min(v, this.max), this.min);\r\n            this.inputValue = value;\r\n\r\n            if (value < 0.5) {\r\n                value = (1 + ((0.5 - value) / 0.5) * (maxTension - 1)) * -1;\r\n            } else {\r\n                value = 1 + ((value-0.5) / 0.5) * (maxTension - 1)\r\n            }\r\n\r\n            this.computedValue = value;\r\n        }\r\n    },\r\n    pointsPerCircle: {\r\n        type: \"range\",\r\n        initial: 20,\r\n        min: 4,\r\n        max: 80,\r\n        step: 1,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    smoothness: {\r\n        type: \"range\",\r\n        initial: 0,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    randomizePointsInterval: {\r\n        group: \"randomizePointsInterval\",\r\n        type: \"select\",\r\n        listOfValues: [\r\n            {value: true, text: \"true\"},\r\n            {value: false, text: \"false\", selected: true},\r\n        ],\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let value;\r\n\r\n            try {\r\n                value = JSON.parse(v);\r\n            } catch {\r\n                value = v;\r\n            }\r\n\r\n            this.computedValue = this.inputValue = value;\r\n        }\r\n    },\r\n    pointsIntervalRandomizationFactor: {\r\n        group: \"randomizePointsInterval\",\r\n        type: \"range\",\r\n        label: \"randomizationFactor\",\r\n        initial: 0,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    pointsIntervalRandomizationSeed: {\r\n        group: \"randomizePointsInterval\",\r\n        type: \"button\",\r\n        text: \"seed\",\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = v;\r\n        },\r\n        onClick: function () {\r\n     \r\n            requestAnimationFrame(() => {\r\n                draw(params, {pointsInterval: true});\r\n            });\r\n        }\r\n    },\r\n    circlesRotationVariationType: {\r\n        group: \"circlesRotationVariation\",\r\n        label: \"type\",\r\n        type: \"select\",\r\n        listOfValues: [\r\n            {value: false, text: \"none\", selected: true},\r\n            {value: \"randomization\", text: \"randomization\"},\r\n            {value: \"progression\", text: \"progression\"},\r\n        ],\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let value;\r\n\r\n            try {\r\n                value = JSON.parse(v);\r\n            } catch {\r\n                value = v;\r\n            }\r\n\r\n            this.computedValue = this.inputValue = value;\r\n\r\n            if (value) {\r\n                requestAnimationFrame(() => {\r\n                    draw(params, {circlesRotation: true});\r\n                });\r\n            }\r\n        }\r\n    },\r\n    circlesRotationVariationFactor: {\r\n        group: \"circlesRotationVariation\",\r\n        type: \"range\",\r\n        label: \"variationFactor\",\r\n        initial: 0,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    circlesRotationVariationSeed: {\r\n        group: \"circlesRotationVariation\",\r\n        type: \"button\",\r\n        text: \"seed\",\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = v;\r\n        },\r\n        onClick: function () {\r\n     \r\n            requestAnimationFrame(() => {\r\n                draw(params, {circlesRotation: true});\r\n            });\r\n        }\r\n    },\r\n    strokeWidth: {\r\n        type: \"number\",\r\n        initial: 1,\r\n        min: 2,\r\n        max: 100,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            let value = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n            this.computedValue = (params.resolution.value * value) / 2048;\r\n        }\r\n    },\r\n    alphaBackground: {\r\n        type: \"select\",\r\n        listOfValues: [\r\n            {value: true, text: \"true\"},\r\n            {value: false, text: \"false\", selected: true},\r\n        ],\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let value;\r\n\r\n            try {\r\n                value = JSON.parse(v);\r\n            } catch {\r\n                value = v;\r\n            }\r\n\r\n            this.computedValue = this.inputValue = value;\r\n        }\r\n    },\r\n    downloadImage: {\r\n        group: \"downloadImage\",\r\n        type: \"button\",\r\n        text: \"download\",\r\n        onClick: function () {\r\n            _.canvas.toBlob(blob => {\r\n\r\n                let a = document.createElement('a');\r\n                a.href = URL.createObjectURL(blob);\r\n                a.setAttribute('download', '');\r\n                a.click();\r\n                URL.revokeObjectURL(a.href);\r\n\r\n            }, \"image/png\")\r\n        }\r\n    }\r\n};\r\n\r\nexport { params };","const camelCaseToSpan = function (str) {\r\n    \r\n    let uppers = [0], span = \"\";\r\n\r\n    Array.from(str).forEach((char, i) => {\r\n        if (char.toUpperCase() === char) uppers.push(i);\r\n    });\r\n\r\n    uppers.forEach((upIndex, i) => {\r\n        span += \"<span>\" + str.slice(upIndex, uppers[i + 1]) + \"</span>\";\r\n    })\r\n\r\n    return span;\r\n\r\n};\r\n\r\nexport { camelCaseToSpan };","import { _ } from \"./global_var\";\r\nimport { camelCaseToSpan } from \"./utils\";\r\nimport { params } from \"./parameters\";\r\nimport { draw } from \"./draw\";\r\n\r\nconst inputHandler = function (e) {\r\n\r\n    let param = e.target.getAttribute(\"data-var\");\r\n    let newValue = e.target.value;\r\n\r\n    params[param].value = newValue;\r\n\r\n    requestAnimationFrame(() => {\r\n\r\n        let seedParam;\r\n\r\n        if (param === \"pointsPerCircle\") {\r\n            seedParam = { pointsInterval: true, pointsHeight: true };\r\n        } else if (param === \"iterations\") {\r\n            seedParam = { pointsInterval: true, pointsHeight: true, circlesRotation: true };\r\n        }\r\n\r\n        draw(params, seedParam);\r\n    });\r\n};\r\n\r\nconst generateUI = function (params) {\r\n    for (let param in params) {\r\n\r\n        let current = params[param];\r\n    \r\n        if (current.hasOwnProperty('initial')) current.value = current.initial;\r\n    \r\n        let fieldset, elt;\r\n    \r\n        if (current.hasOwnProperty('group')) {\r\n            \r\n            let group = document.querySelector(\".\" + current.group);\r\n    \r\n            if (group) fieldset = group;\r\n            else {\r\n    \r\n                fieldset = document.createElement('fieldset');\r\n                fieldset.classList.add(current.group);\r\n                let legend = document.createElement('legend');\r\n                legend.innerHTML = camelCaseToSpan(current.group);\r\n                fieldset.append(legend);\r\n    \r\n            }\r\n        } else {\r\n            fieldset = document.createElement('fieldset');\r\n            let legend = document.createElement('legend');\r\n            legend.innerHTML = camelCaseToSpan(param);\r\n            fieldset.append(legend);\r\n        }\r\n    \r\n        if (current.type === \"button\") {\r\n    \r\n            elt = document.createElement('button');\r\n            elt.innerHTML = current.text;\r\n            elt.addEventListener('click', current.onClick);\r\n            \r\n        } else if (current.type === \"select\") {\r\n    \r\n            elt = document.createElement(\"select\");\r\n    \r\n            current.listOfValues.forEach(value => {\r\n                elt.innerHTML += `<option ${value.hasOwnProperty(\"selected\") && value.selected ? \"selected\" : \"\"} value=\"${value.value}\">${value.text}</option>`\r\n            });\r\n    \r\n            elt.addEventListener('input', inputHandler);\r\n            elt.setAttribute('data-var', param);\r\n    \r\n        } else {\r\n    \r\n            elt = document.createElement(\"input\");\r\n    \r\n            elt.type = current.type;\r\n\r\n            if (current.hasOwnProperty('step')) elt.step = current.step;\r\n    \r\n            if (current.hasOwnProperty('min')) elt.min = current.min;\r\n            if (current.hasOwnProperty('max')) elt.max = current.max;\r\n    \r\n            elt.value = current.inputValue;\r\n    \r\n            elt.addEventListener('input', inputHandler);\r\n            elt.setAttribute('data-var', param);\r\n        }\r\n    \r\n        if (current.hasOwnProperty(\"label\")) {\r\n            let fieldsetLabel = document.createElement(\"fieldset\");\r\n            let label = document.createElement('legend');\r\n            label.innerHTML = camelCaseToSpan(current.label);\r\n            fieldsetLabel.append(label);\r\n            fieldsetLabel.append(elt);\r\n            elt = fieldsetLabel;\r\n        }\r\n    \r\n        fieldset.append(elt);\r\n    \r\n        _.paramsWindow.append(fieldset);\r\n    }\r\n};\r\n\r\nexport { generateUI };","import { params } from \"./modules/parameters\";\r\nimport { generateUI } from \"./modules/generate_ui\";\r\nimport { draw } from \"./modules/draw\";\r\n\r\ngenerateUI(params);\r\n\r\nrequestAnimationFrame(() => {\r\n    draw(params)\r\n});\r\n\r\n"],"names":["$ba34ad0cc1ecfea6$var$canvas","document","querySelector","$ba34ad0cc1ecfea6$var$ctx","getContext","$ba34ad0cc1ecfea6$export$71511d61b312f219","canvas","ctx","paramsWindow","getElementById","$58c2b6c9d3a00a13$export$6c4a311cc157c764","p1","p2","Math","sqrt","pow","x","y","$58c2b6c9d3a00a13$export$36b2348463b95166","pRef1","pRef2","pTarget","circleOrigin","offset","dir","na","a","b","max","min","$58c2b6c9d3a00a13$export$7e3e5a9ff6d02ede","pBefore","pCurrent","pAfter","distFromCurrentFactor","params","smoothness","initial","beforeToCurrentMid","currentToAfterMid","newCurrent","beforeToCurrentDist","currentToAfterDist","$ea6065299f17f9f2$export$e529deb2bfd496dc","generateNewSeed","pointsInterval","pointsHeight","circlesRotation","clearRect","resolution","value","lineWidth","strokeWidth","alphaBackground","fillStyle","fillRect","width","height","pointsPerCircle","arr","i","iterations","push","$58c2b6c9d3a00a13$export$a990042fb368a533","circlesRadius","number","step","radius","ease","tension","round","smallestCircleScale","biggestCircleScale","$58c2b6c9d3a00a13$export$a0802d0d56310d0a","randomizePointsInterval","pointsIntervalRandomizationSeed","Array","apply","map","random","circlesRotationVariationType","circlesRotationVariationSeed","i1","forEach","circleRadius","i2","randomPointsInterval","isArray","circlesRotationVariation","points","rayon","pointsNumber","originFromCenter","distanceFromCenter","originX","cos","originRotate","PI","originY","sin","pointsWithCp","pointsIntervalRandomizationFactor","circlesRotationVariationFactor","point","pointBefore","length","pointAfter","$58c2b6c9d3a00a13$export$af0496c55bf31eb","beginPath","moveTo","lineTo","cpStart","cpr","cpEnd","cpl","bezierCurveTo","closePath","stroke","$edfdaed3b9f3fa0f$export$281ad3752a540efe","$edfdaed3b9f3fa0f$var$forceRecompute","paramName","param","inputValue","group","label","type","window","innerHeight","this","computedValue","v","listOfValues","text","selected","JSON","parse","onClick","requestAnimationFrame","downloadImage","toBlob","blob","createElement","href","URL","createObjectURL","setAttribute","click","revokeObjectURL","$c96f57613fceb58f$export$465e181847366fda","str","uppers","span","from","char","toUpperCase","upIndex","slice","$36768e1cc8fcd734$var$inputHandler","e","target","getAttribute","newValue","seedParam","fieldset","elt","current","hasOwnProperty","classList","add","legend","innerHTML","append","addEventListener","fieldsetLabel","$36768e1cc8fcd734$export$cddef0e4b5e6ec4c"],"version":3,"file":"index.342a4125.js.map"}