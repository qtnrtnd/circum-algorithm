{"mappings":"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","sources":["src/script/modules/global_var.js","src/script/modules/geometry_functions.js","src/script/modules/draw.js","src/script/modules/parameters.js","src/script/modules/utils.js","src/script/modules/generate_ui.js","src/script/index.js"],"sourcesContent":["const canvas = document.querySelector('canvas');\r\nconst ctx = canvas.getContext('2d');\r\n\r\nconst _ = {\r\n    canvas : canvas,\r\n    ctx: ctx,\r\n    paramsWindow: document.getElementById('params')\r\n}\r\n\r\nexport { _ };","import { _ } from \"./global_var\";\r\n\r\nconst dist = function (p1, p2) {\r\n    return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2))\r\n}\r\n\r\nconst offsetPointOnAxis = function (pRef1, pRef2, pTarget, circleOrigin, offset = 0, dir = \"right\") {\r\n    \r\n    let na = pRef1.x > pRef2.x ? pRef1.x - pRef2.x : pRef2.x - pRef1.x;\r\n    na = na === 0 ? 1 : na;\r\n    let c = pRef1.x > pRef2.x ? pRef1.y - pRef2.y : pRef2.y - pRef1.y;\r\n    let a = c / na;\r\n    let b = pRef1.y - a * pRef1.x;\r\n\r\n    let x, y;\r\n\r\n    let DXgreaterThanDY = Math.max(pRef1.x, pRef2.x) - Math.min(pRef1.x, pRef2.x) > Math.max(pRef1.y, pRef2.y) - Math.min(pRef1.y, pRef2.y);\r\n\r\n    if (DXgreaterThanDY) {\r\n\r\n        if (pTarget.y > circleOrigin.y) {\r\n            dir = dir === \"right\" ? -1 : (dir === \"left\" ? 1 : 0);\r\n        } else {\r\n            dir = dir === \"right\" ? 1 : (dir === \"left\" ? -1 : 0);\r\n        }\r\n\r\n        x = pTarget.x + dir * offset;\r\n        y = a * x + b\r\n\r\n    } else {\r\n\r\n        if (pTarget.x > circleOrigin.x) {\r\n            dir = dir === \"right\" ? 1 : (dir === \"left\" ? -1 : 0);\r\n        } else {\r\n            dir = dir === \"right\" ? -1 : (dir === \"left\" ? 1 : 0);\r\n        }\r\n\r\n        y = pTarget.y + dir * offset;\r\n        x = (y - b) / a\r\n    }\r\n\r\n    return { x: x, y: y };\r\n\r\n}\r\n\r\nconst getControlPoints = function (pBefore, pCurrent, pAfter, circleOrigin, distFromCurrentFactor = params.smoothness.initial) {\r\n\r\n    distFromCurrentFactor = Math.max(0, Math.min(distFromCurrentFactor, 1));\r\n\r\n    let beforeToCurrentMid = { x: (pBefore.x + pCurrent.x) / 2, y: (pBefore.y + pCurrent.y) / 2 };\r\n\r\n    let currentToAfterMid = { x: (pCurrent.x + pAfter.x) / 2, y: (pCurrent.y + pAfter.y) / 2 };\r\n\r\n    let newCurrent = { x: (beforeToCurrentMid.x + currentToAfterMid.x) / 2, y: (beforeToCurrentMid.y + currentToAfterMid.y) / 2 };\r\n    \r\n    let beforeToCurrentDist = dist(beforeToCurrentMid, newCurrent);\r\n    let currentToAfterDist = dist(newCurrent, currentToAfterMid)\r\n\r\n    let cpl = offsetPointOnAxis(beforeToCurrentMid, currentToAfterMid, newCurrent, circleOrigin, beforeToCurrentDist * 0.552 * distFromCurrentFactor, \"left\");\r\n\r\n    let cpr = offsetPointOnAxis(beforeToCurrentMid, currentToAfterMid, newCurrent, circleOrigin, currentToAfterDist * 0.552 * distFromCurrentFactor, \"right\");\r\n\r\n    return { cpl, cpr, x: newCurrent.x , y: newCurrent.y };\r\n\r\n}\r\n\r\nconst getPoints = function (rayon, pointsNumber, randomValues, params) {\r\n\r\n    let step = 360 / pointsNumber;\r\n\r\n    let originFromCenter = (params.biggestCircleScale.value / 2 - rayon) * params.distanceFromCenter.value;\r\n    let originX = _.canvas.width / 2 + (originFromCenter * Math.cos(params.originRotate.value * Math.PI / 180));\r\n    let originY = _.canvas.height / 2 + (originFromCenter * Math.sin(params.originRotate.value * Math.PI / 180));\r\n\r\n    let points = [], pointsWithCp = [];\r\n\r\n    for (let i = 0; i < pointsNumber; i++){\r\n\r\n        let offset = params.randomizePointsInterval.value ? step * randomValues[i] * params.pointsIntervalRandomizationFactor.value : 0;\r\n\r\n        let x = originX + rayon * Math.cos((i * step + offset) * Math.PI / 180);\r\n        let y = originY + rayon * Math.sin((i * step + offset) * Math.PI / 180);\r\n\r\n        points.push({ x: x, y: y });\r\n        \r\n    }\r\n\r\n    points.forEach((point, i) => {\r\n        \r\n        let pointBefore = i > 0 ? points[i - 1] : points[points.length - 1];\r\n\r\n        let pointAfter = i < points.length - 1 ? points[i + 1] : points[0];\r\n\r\n        pointsWithCp.push(getControlPoints(pointBefore, point, pointAfter, {x: originX, y: originY}, params.smoothness.value));\r\n    });\r\n\r\n    return pointsWithCp;\r\n}\r\n\r\nconst getCirclesRadius = function (params) {\r\n\r\n    let number = params.iterations.value;\r\n\r\n    let step = 1 / Math.max((number - 1), 1);\r\n\r\n    let radius = [];\r\n\r\n    for (let i = 0; i < number; i++){\r\n\r\n        let ease;\r\n\r\n        if (params.tension.value < 0) {\r\n            ease = 1 - Math.pow(1 - (i * step), params.tension.value * -1)\r\n        } else {\r\n            ease = Math.pow(i * step, params.tension.value);\r\n        }\r\n\r\n        radius.push(Math.round((params.smallestCircleScale.value + (ease * (params.biggestCircleScale.value - params.smallestCircleScale.value))) * 1000) / 2000);\r\n    }\r\n\r\n    return radius;\r\n}\r\n\r\nconst getPointsNumber = function (params) {\r\n\r\n    let arr = []\r\n\r\n    for (let i = 0; i < params.iterations.value; i++){\r\n        arr.push(params.pointsPerCircle.value);\r\n    }\r\n\r\n    return arr;\r\n}\r\n\r\nexport { dist, offsetPointOnAxis, getControlPoints, getPoints, getCirclesRadius, getPointsNumber };","import { _ } from \"./global_var\";\r\nimport { getCirclesRadius, getPointsNumber, getPoints } from \"./geometry_functions\";\r\n\r\nconst draw = function (params, generateNewSeed = { pointsInterval: false, pointsHeight: false, circlesRotation: false }) {\r\n\r\n    _.ctx.clearRect(0, 0, params.resolution.value, params.resolution.value);\r\n\r\n    _.ctx.lineWidth = params.strokeWidth.value;\r\n\r\n    if (!params.alphaBackground.value) {\r\n        _.ctx.fillStyle = \"white\";\r\n        _.ctx.fillRect(0, 0, _.canvas.width, _.canvas.height);\r\n    }\r\n\r\n    const circlesRadius = getCirclesRadius(params);\r\n\r\n    const pointsPerCircle = getPointsNumber(params);\r\n\r\n    let newRandomPointsInterval = params.randomizePointsInterval.value && (generateNewSeed.pointsInterval || params.pointsIntervalRandomizationSeed.value.length === 0);\r\n\r\n    if (newRandomPointsInterval) {\r\n        \r\n        let arr = [];\r\n\r\n        for (let i = 0; i < params.iterations.value; i++) {\r\n            arr.push(Array.apply(null, Array(pointsPerCircle[i])).map(() => -0.5 + Math.random()))\r\n        }\r\n\r\n        params.pointsIntervalRandomizationSeed.value = arr;\r\n    }\r\n\r\n    circlesRadius.forEach((circleRadius, i) => {\r\n\r\n        let points = getPoints(circleRadius, pointsPerCircle[i], params.pointsIntervalRandomizationSeed.value[i], params);\r\n\r\n        _.ctx.beginPath();\r\n        \r\n        points.forEach((point, i) => {\r\n\r\n            if (i === 0) _.ctx.moveTo(point.x, point.y);\r\n\r\n            if (params.smoothness.value === 0) {\r\n                \r\n                _.ctx.lineTo(point.x, point.y);\r\n                \r\n            } else if (i > 0) {\r\n\r\n                let cpStart = points[i - 1].cpr;\r\n                let cpEnd = point.cpl;\r\n\r\n                _.ctx.bezierCurveTo(cpStart.x, cpStart.y, cpEnd.x, cpEnd.y, point.x, point.y);\r\n            }\r\n        });\r\n\r\n        if (params.smoothness.value > 0) {\r\n            _.ctx.bezierCurveTo(points[points.length - 1].cpr.x, points[points.length - 1].cpr.y, points[0].cpl.x, points[0].cpl.y, points[0].x, points[0].y);\r\n        } else {\r\n            _.ctx.closePath();\r\n        }\r\n        _.ctx.stroke();\r\n\r\n        /*points.forEach((point, i) => {\r\n\r\n            _.ctx.beginPath();\r\n            _.ctx.fillStyle = \"green\"\r\n            _.ctx.arc(point.x, point.y, 2, 0, 180);\r\n            _.ctx.fill();\r\n\r\n            _.ctx.beginPath();\r\n            _.ctx.fillStyle = \"blue\"\r\n            _.ctx.arc(point.cpl.x, point.cpl.y, 2, 0, 180);\r\n            _.ctx.fill();\r\n\r\n            _.ctx.beginPath();\r\n            _.ctx.fillStyle = \"blue\"\r\n            _.ctx.arc(point.cpr.x, point.cpr.y, 2, 0, 180);\r\n            _.ctx.fill();\r\n            \r\n            _.ctx.beginPath();\r\n            _.ctx.moveTo(point.cpl.x, point.cpl.y);\r\n            _.ctx.lineTo(point.cpr.x, point.cpr.y);\r\n            _.ctx.stroke()\r\n        })*/\r\n    })\r\n    \r\n};\r\n\r\nexport { draw };","import { _ } from \"./global_var\";\r\nimport { draw } from \"./draw\";\r\n\r\nlet params;\r\n\r\nparams = {\r\n    resolution: {\r\n        group: \"downloadImage\",\r\n        label: \"resolution\",\r\n        type: \"number\",\r\n        initial: window.innerHeight,\r\n        min: 1,\r\n        max: 6000,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            let value = Math.max(Math.min(v, this.max), this.min);\r\n            this.computedValue = this.inputValue = _.canvas.width = _.canvas.height = value;\r\n\r\n            if (params.biggestCircleScale.inputValue !== null) params.biggestCircleScale.value = params.biggestCircleScale.inputValue;\r\n\r\n            if(params.strokeWidth.inputValue !== null) params.strokeWidth.value = params.strokeWidth.inputValue;\r\n        }\r\n    },\r\n    biggestCircleScale: {\r\n        type: \"range\",\r\n        initial: 0.9,\r\n        min: 0,\r\n        max: 2,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            let value = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n            this.computedValue = value * params.resolution.value;\r\n\r\n            if (params.smallestCircleScale.inputValue !== null) params.smallestCircleScale.value = params.smallestCircleScale.inputValue; \r\n        }\r\n    },\r\n    smallestCircleScale: {\r\n        type: \"range\",\r\n        initial: 0.4,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            let value = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n            this.computedValue = value * params.biggestCircleScale.value;\r\n        }\r\n    },\r\n    originRotate: {\r\n        group: \"origin\",\r\n        type: \"range\",\r\n        label: \"rotate\",\r\n        initial: 60,\r\n        min: 0,\r\n        max: 360,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    distanceFromCenter: {\r\n        group: \"origin\",\r\n        type: \"range\",\r\n        label: \"distanceFromCenter\",\r\n        initial: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    iterations: {\r\n        type: \"range\",\r\n        initial: 25,\r\n        min: 1,\r\n        max: 200,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    tension: {\r\n        type: \"range\",\r\n        initial: 0.5,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n\r\n            let maxTension = 5;\r\n\r\n            let value = Math.max(Math.min(v, this.max), this.min);\r\n            this.inputValue = value;\r\n\r\n            if (value < 0.5) {\r\n                value = (1 + ((0.5 - value) / 0.5) * (maxTension - 1)) * -1;\r\n            } else {\r\n                value = 1 + ((value-0.5) / 0.5) * (maxTension - 1)\r\n            }\r\n\r\n            this.computedValue = value;\r\n        }\r\n    },\r\n    pointsPerCircle: {\r\n        type: \"range\",\r\n        initial: 20,\r\n        min: 4,\r\n        max: 80,\r\n        step: 1,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    smoothness: {\r\n        type: \"range\",\r\n        initial: 0,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    randomizePointsInterval: {\r\n        group: \"randomizePointsInterval\",\r\n        type: \"select\",\r\n        listOfValues: [\r\n            {value: true, text: \"true\"},\r\n            {value: false, text: \"false\", selected: true},\r\n        ],\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = JSON.parse(v);\r\n        }\r\n    },\r\n    pointsIntervalRandomizationFactor: {\r\n        group: \"randomizePointsInterval\",\r\n        type: \"range\",\r\n        label: \"randomizationFactor\",\r\n        initial: 0,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    pointsIntervalRandomizationSeed: {\r\n        group: \"randomizePointsInterval\",\r\n        type: \"button\",\r\n        text: \"seed\",\r\n        initial: [],\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = v;\r\n        },\r\n        onClick: function () {\r\n     \r\n            requestAnimationFrame(() => {\r\n                draw(params, {pointsInterval: true});\r\n            });\r\n        }\r\n    },\r\n    circlesRotationVariationType: {\r\n        group: \"circlesRotationVariation\",\r\n        label: \"type\",\r\n        type: \"select\",\r\n        listOfValues: [\r\n            {value: false, text: \"none\", selected: true},\r\n            {value: \"randomization\", text: \"randomization\"},\r\n            {value: \"progression\", text: \"progression\"}\r\n        ],\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = JSON.parse(v);\r\n        }\r\n    },\r\n    circlesRotationVariationFactor: {\r\n        group: \"circlesRotationVariation\",\r\n        type: \"range\",\r\n        label: \"variationFactor\",\r\n        initial: 0,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n        }\r\n    },\r\n    circlesRotationRandomizationSeed: {\r\n        group: \"circlesRotationVariation\",\r\n        type: \"button\",\r\n        text: \"seed\",\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = v;\r\n        },\r\n        onClick: function () {\r\n     \r\n            requestAnimationFrame(() => {\r\n                draw(params, {circlesRotation: true});\r\n            });\r\n        }\r\n    },\r\n    strokeWidth: {\r\n        type: \"number\",\r\n        initial: 1,\r\n        min: 2,\r\n        max: 100,\r\n        step: 0.01,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            let value = this.inputValue = Math.max(Math.min(v, this.max), this.min);\r\n            this.computedValue = (params.resolution.value * value) / 2048;\r\n        }\r\n    },\r\n    alphaBackground: {\r\n        type: \"select\",\r\n        listOfValues: [\r\n            {value: true, text: \"true\"},\r\n            {value: false, text: \"false\", selected: true},\r\n        ],\r\n        initial: false,\r\n        get value() {\r\n            return this.computedValue;\r\n        },\r\n        set value(v) {\r\n            this.computedValue = this.inputValue = JSON.parse(v);\r\n        }\r\n    },\r\n    downloadImage: {\r\n        group: \"downloadImage\",\r\n        type: \"button\",\r\n        text: \"download\",\r\n        onClick: function () {\r\n            _.canvas.toBlob(blob => {\r\n\r\n                let a = document.createElement('a');\r\n                a.href = URL.createObjectURL(blob);\r\n                a.setAttribute('download', '');\r\n                a.click();\r\n                URL.revokeObjectURL(a.href);\r\n\r\n            }, \"image/png\")\r\n        }\r\n    }\r\n};\r\n\r\nexport { params };","const camelCaseToSpan = function (str) {\r\n    \r\n    let uppers = [0], span = \"\";\r\n\r\n    Array.from(str).forEach((char, i) => {\r\n        if (char.toUpperCase() === char) uppers.push(i);\r\n    });\r\n\r\n    uppers.forEach((upIndex, i) => {\r\n        span += \"<span>\" + str.slice(upIndex, uppers[i + 1]) + \"</span>\";\r\n    })\r\n\r\n    return span;\r\n\r\n};\r\n\r\nexport { camelCaseToSpan };","import { _ } from \"./global_var\";\r\nimport { camelCaseToSpan } from \"./utils\";\r\nimport { params } from \"./parameters\";\r\nimport { draw } from \"./draw\";\r\n\r\nconst inputHandler = function (e) {\r\n\r\n    let param = e.target.getAttribute(\"data-var\");\r\n    let newValue = e.target.value;\r\n\r\n    params[param].value = newValue;\r\n\r\n    requestAnimationFrame(() => {\r\n        draw(params, [\"pointsPerCircle\", \"iterations\"].includes(param) ? { pointsInterval: true, pointsHeight: true } : { pointsInterval: false, pointsHeight: false });\r\n    });\r\n};\r\n\r\nconst generateUI = function (params) {\r\n    for (let param in params) {\r\n\r\n        let current = params[param];\r\n    \r\n        if (current.hasOwnProperty('initial')) current.value = current.initial;\r\n    \r\n        let fieldset, elt;\r\n    \r\n        if (current.hasOwnProperty('group')) {\r\n            \r\n            let group = document.querySelector(\".\" + current.group);\r\n    \r\n            if (group) fieldset = group;\r\n            else {\r\n    \r\n                fieldset = document.createElement('fieldset');\r\n                fieldset.classList.add(current.group);\r\n                let legend = document.createElement('legend');\r\n                legend.innerHTML = camelCaseToSpan(current.group);\r\n                fieldset.append(legend);\r\n    \r\n            }\r\n        } else {\r\n            fieldset = document.createElement('fieldset');\r\n            let legend = document.createElement('legend');\r\n            legend.innerHTML = camelCaseToSpan(param);\r\n            fieldset.append(legend);\r\n        }\r\n    \r\n        if (current.type === \"button\") {\r\n    \r\n            elt = document.createElement('button');\r\n            elt.innerHTML = current.text;\r\n            elt.addEventListener('click', current.onClick);\r\n            \r\n        } else if (current.type === \"select\") {\r\n    \r\n            elt = document.createElement(\"select\");\r\n    \r\n            current.listOfValues.forEach(value => {\r\n                elt.innerHTML += `<option ${value.hasOwnProperty(\"selected\") && value.selected ? \"selected\" : \"\"} value=\"${value.value}\">${value.text}</option>`\r\n            });\r\n    \r\n            elt.addEventListener('input', inputHandler);\r\n            elt.setAttribute('data-var', param);\r\n    \r\n        } else {\r\n    \r\n            elt = document.createElement(\"input\");\r\n    \r\n            elt.type = current.type;\r\n\r\n            if (current.hasOwnProperty('step')) elt.step = current.step;\r\n    \r\n            if (current.hasOwnProperty('min')) elt.min = current.min;\r\n            if (current.hasOwnProperty('max')) elt.max = current.max;\r\n    \r\n            elt.value = current.inputValue;\r\n    \r\n            elt.addEventListener('input', inputHandler);\r\n            elt.setAttribute('data-var', param);\r\n        }\r\n    \r\n        if (current.hasOwnProperty(\"label\")) {\r\n            let fieldsetLabel = document.createElement(\"fieldset\");\r\n            let label = document.createElement('legend');\r\n            label.innerHTML = camelCaseToSpan(current.label);\r\n            fieldsetLabel.append(label);\r\n            fieldsetLabel.append(elt);\r\n            elt = fieldsetLabel;\r\n        }\r\n    \r\n        fieldset.append(elt);\r\n    \r\n        _.paramsWindow.append(fieldset);\r\n    }\r\n};\r\n\r\nexport { generateUI };","import { params } from \"./modules/parameters\";\r\nimport { generateUI } from \"./modules/generate_ui\";\r\nimport { draw } from \"./modules/draw\";\r\n\r\ngenerateUI(params);\r\n\r\nrequestAnimationFrame(() => {\r\n    draw(params)\r\n});\r\n\r\n"],"names":["$ba34ad0cc1ecfea6$var$canvas","document","querySelector","$ba34ad0cc1ecfea6$var$ctx","getContext","$ba34ad0cc1ecfea6$export$71511d61b312f219","canvas","ctx","paramsWindow","getElementById","$58c2b6c9d3a00a13$export$6c4a311cc157c764","p1","p2","Math","sqrt","pow","x","y","$58c2b6c9d3a00a13$export$36b2348463b95166","pRef1","pRef2","pTarget","circleOrigin","offset","dir","na","a","b","max","min","$58c2b6c9d3a00a13$export$7e3e5a9ff6d02ede","pBefore","pCurrent","pAfter","distFromCurrentFactor","params","smoothness","initial","beforeToCurrentMid","currentToAfterMid","newCurrent","beforeToCurrentDist","currentToAfterDist","$ea6065299f17f9f2$export$e529deb2bfd496dc","generateNewSeed","pointsInterval","pointsHeight","circlesRotation","clearRect","resolution","value","lineWidth","strokeWidth","alphaBackground","fillStyle","fillRect","width","height","circlesRadius","number","iterations","step","radius","i","ease","tension","push","round","smallestCircleScale","biggestCircleScale","$58c2b6c9d3a00a13$export$a0802d0d56310d0a","pointsPerCircle","arr","$58c2b6c9d3a00a13$export$a990042fb368a533","randomizePointsInterval","pointsIntervalRandomizationSeed","length","Array","apply","map","random","forEach","circleRadius","i1","points","rayon","pointsNumber","randomValues","originFromCenter","distanceFromCenter","originX","cos","originRotate","PI","originY","sin","pointsWithCp","pointsIntervalRandomizationFactor","point","pointBefore","pointAfter","$58c2b6c9d3a00a13$export$af0496c55bf31eb","beginPath","moveTo","lineTo","cpStart","cpr","cpEnd","cpl","bezierCurveTo","closePath","stroke","$edfdaed3b9f3fa0f$export$281ad3752a540efe","group","label","type","window","innerHeight","this","computedValue","v","inputValue","listOfValues","text","selected","JSON","parse","onClick","requestAnimationFrame","circlesRotationVariationType","circlesRotationVariationFactor","circlesRotationRandomizationSeed","downloadImage","toBlob","blob","createElement","href","URL","createObjectURL","setAttribute","click","revokeObjectURL","$c96f57613fceb58f$export$465e181847366fda","str","uppers","span","from","char","toUpperCase","upIndex","slice","$36768e1cc8fcd734$var$inputHandler","e","param","target","getAttribute","newValue","includes","fieldset","elt","current","hasOwnProperty","classList","add","legend","innerHTML","append","addEventListener","fieldsetLabel","$36768e1cc8fcd734$export$cddef0e4b5e6ec4c"],"version":3,"file":"index.458d345b.js.map"}